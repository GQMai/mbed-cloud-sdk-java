/*
 * This build file was generated by the Gradle 'init' task.
 *
 */
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-simple:1.7.7'
    compile project(":mbed-cloud-sdk-java")
    // Use JUnit test framework
    compile 'junit:junit:4.12'
    testCompile 'junit:junit:4.12'
    testCompile 'org.slf4j:slf4j-simple:1.7.7'
}
compileJava {
    // Java SDK compatibility
    sourceCompatibility JavaVersion.VERSION_1_8.toString()
    targetCompatibility JavaVersion.VERSION_1_8.toString()

    options.compilerArgs += ["-deprecation", "-parameters"]
    options.fork = true
    doFirst {
        println 'Compiler args for compiled SDK : ' + options.compilerArgs
    }
}
javadoc {
    exclude '**/utils/**'
    destinationDir = file("${project(':mbed-cloud-sdk-java').projectDir}/docs/${rootProject.name}")
    title = "Arm Mbed Cloud SDK Examples"
    options.overview = "src/main/javadoc/overview.html"
    // Add --allow-script-in-comments if available (since 1.8.0_121) see related issue https://github.com/gradle/gradle/issues/1393
    try {
        if (Class.forName('com.sun.tools.doclets.formats.html.ConfigurationImpl')
                .newInstance().optionLength('--allow-script-in-comments') > 0) {
            options.addBooleanOption("-allow-script-in-comments", true)
        }
    } catch (ignored) {
    }


    options.setLinkSource(true)


    if (project.hasProperty('javadocStylesheet') && "${javadocStylesheet}"?.trim()) {
        def file = new File("${javadocStylesheet}")
        if (file.exists()) {
            options.setStylesheetFile(file)
        }
    }
    if (project.hasProperty('javadocHeader') && "${javadocHeader}"?.trim()) {
        def file = new File("${javadocHeader}")
        if (file.exists()) {
            def headerValue = "\"" + file.getText('UTF-8').replace("\n", "").replace("\r", "") + "\""
            options.setHeader(headerValue)
        }
    }
    if (project.hasProperty('javadocFooter') && "${javadocFooter}"?.trim()) {
        def file = new File("${javadocFooter}")
        if (file.exists()) {
            def footerValue = "\"" + file.getText('UTF-8').replace("\n", "").replace("\r", "") + "\""
            options.setFooter(footerValue)
        }
    }
    if (project.hasProperty('javadocTop') && "${javadocTop}"?.trim()) {
        def file = new File("${javadocBottom}")
        if (file.exists()) {
            def topValue = "\"" + file.getText('UTF-8').replace("\n", "").replace("\r", "") + "\""
            options.addStringOption('top', topValue)
        }
    }
    if (project.hasProperty('javadocBottom') && "${javadocBottom}"?.trim()) {
        def file = new File("${javadocBottom}")
        if (file.exists()) {
            def bottomValue = "\"" + file.getText('UTF-8').replace("\n", "").replace("\r", "") + "\""
            options.setBottom(bottomValue)
        }
    }
}

allprojects {
    buildscript {
        repositories {
            jcenter()
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }
    repositories {
        jcenter()
        mavenCentral()
    }
}
subprojects {
    tasks.whenTaskAdded { task ->
        if (task.name == 'javadoc' || task.name == 'checkstyleMain' || task.name == 'findbugsMain' || task.name == 'pmdMain') {
            task.enabled = false
        }
        if (project.hasProperty('UpdateArtifactList')) {
            if (project.UpdateArtifactList) {
                project.UpdateArtifactList = ''
            }
        }

    }
}

sourceSets {
    test {
        java.srcDir 'src/main/java'
    }
}
