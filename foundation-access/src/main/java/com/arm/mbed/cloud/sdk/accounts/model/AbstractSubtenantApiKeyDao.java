// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [SubtenantApiKeyDao]
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.Accounts;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CrudDao;

/**
 * Data Access Object (DAO) for subtenant api keys.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for subtenant api keys.")
public abstract class AbstractSubtenantApiKeyDao extends AbstractModelDao<SubtenantApiKey>
                                                 implements CrudDao<SubtenantApiKey> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantApiKeyDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantApiKeyDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantApiKeyDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractSubtenantApiKeyDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Adds a subtenant api key.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyDao#create(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantApiKey create() throws MbedCloudException {
        return create(getModel());
    }

    /**
     * Adds a subtenant api key.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantApiKey(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantApiKey create(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createSubtenantApiKey(subtenantApiKey));
    }

    /**
     * Adds a subtenant api key.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyDao#create(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param accountId
     *            The ID of the account.
     * @return an added subtenant api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantApiKey create(@NonNull String accountId) throws MbedCloudException {
        return create(accountId, getModel());
    }

    /**
     * Adds a subtenant api key.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createSubtenantApiKey(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return an added subtenant api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantApiKey create(@NonNull String accountId,
                                  @NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createSubtenantApiKey(accountId, subtenantApiKey));
    }

    /**
     * Deletes a subtenant api key.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyDao#delete(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes a subtenant api key.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteSubtenantApiKey(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteSubtenantApiKey(subtenantApiKey);
    }

    /**
     * Deletes a subtenant api key.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#deleteSubtenantApiKey(String, String)}
     * 
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the API key to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void delete(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteSubtenantApiKey(accountId, id);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected SubtenantApiKey instantiateModel() {
        return new SubtenantApiKey();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Accounts(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Accounts(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Accounts(context);
    }

    /**
     * Gets a subtenant api key.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyDao#read(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantApiKey read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets a subtenant api key.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#readSubtenantApiKey(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantApiKey read(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readSubtenantApiKey(subtenantApiKey));
    }

    /**
     * Gets a subtenant api key.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readSubtenantApiKey(String, String)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the API key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantApiKey read(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readSubtenantApiKey(accountId, id));
    }

    /**
     * Modifies a subtenant api key.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyDao#update(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantApiKey update() throws MbedCloudException {
        return update(getModel());
    }

    /**
     * Modifies a subtenant api key.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantApiKey(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public SubtenantApiKey update(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateSubtenantApiKey(subtenantApiKey));
    }

    /**
     * Modifies a subtenant api key.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyDao#update(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the API key.
     * @return an updated subtenant api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantApiKey update(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        return update(accountId, id, getModel());
    }

    /**
     * Modifies a subtenant api key.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateSubtenantApiKey(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the API key.
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return an updated subtenant api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public SubtenantApiKey update(@NonNull String accountId, @NonNull String id,
                                  @NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateSubtenantApiKey(accountId, id, subtenantApiKey));
    }
}
