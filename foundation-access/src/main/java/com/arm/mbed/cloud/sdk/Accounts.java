// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk;

import com.arm.mbed.cloud.sdk.accounts.adapters.AccountAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.ApiKeyAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.SubtenantApiKeyAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.SubtenantUserAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.SubtenantUserInvitationAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.UserAdapter;
import com.arm.mbed.cloud.sdk.accounts.adapters.UserInvitationAdapter;
import com.arm.mbed.cloud.sdk.accounts.model.Account;
import com.arm.mbed.cloud.sdk.accounts.model.AccountListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.AccountsEndpoints;
import com.arm.mbed.cloud.sdk.accounts.model.ApiKey;
import com.arm.mbed.cloud.sdk.accounts.model.ApiKeyListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitation;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.User;
import com.arm.mbed.cloud.sdk.accounts.model.UserInvitation;
import com.arm.mbed.cloud.sdk.accounts.model.UserInvitationListOptions;
import com.arm.mbed.cloud.sdk.accounts.model.UserListOptions;
import com.arm.mbed.cloud.sdk.annotations.API;
import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Module;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.AbstractModule;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.CloudCaller;
import com.arm.mbed.cloud.sdk.common.CloudRequest;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.listing.ListOptions;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.PageRequester;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.AccountInfo;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.AccountInfoList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.ApiKeyInfoResp;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.ApiKeyInfoRespList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.TrustedCertificateRespList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInfoResp;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInfoRespList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInvitationResp;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UserInvitationRespList;
import com.arm.mbed.cloud.sdk.security.adapters.SubtenantTrustedCertificateAdapter;
import com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificate;
import com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions;
import retrofit2.Call;

/**
 * Specifies Accounts APIs.
 * <p>
 * API definitions exposing functionality for dealing with accounts
 */
@Preamble(description = "Specifies Accounts APIs.")
@Internal
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
@Module
public class Accounts extends AbstractModule {
    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ACCOUNT = "account";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ACCOUNT_ID = "accountId";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_API_KEY = "apiKey";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ID = "id";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_API_KEY = "subtenantApiKey";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_USER = "subtenantUser";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_USER_INVITATION = "subtenantUserInvitation";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_USER = "user";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_USER_INVITATION = "userInvitation";

    /**
     * module endpoints.
     */
    @Internal
    private final AccountsEndpoints endpoints;

    /**
     * Constructor.
     * 
     * @param client
     *            Cloud client @see {@link ApiClientWrapper}.
     */
    public Accounts(ApiClientWrapper client) {
        super(client);
        this.endpoints = new AccountsEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            connection options @see {@link ConnectionOptions}.
     */
    public Accounts(ConnectionOptions options) {
        super(options);
        this.endpoints = new AccountsEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param context
     *            SDK context @see {@link SdkContext}.
     */
    public Accounts(SdkContext context) {
        super(context);
        this.endpoints = new AccountsEndpoints(this.serviceRegistry);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant api keys matching filter options.
     *
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant api keys
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<SubtenantApiKey>
           allApiKeys(@NonNull String id, @Nullable SubtenantApiKeyListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final SubtenantApiKeyListOptions finalOptions = (options == null) ? new SubtenantApiKeyListOptions() : options;
        return new Paginator<SubtenantApiKey>(finalOptions, new PageRequester<SubtenantApiKey>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<SubtenantApiKey> requestNewPage(ListOptions options) throws MbedCloudException {
                return apiKeys(finalId, (SubtenantApiKeyListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant api keys matching filter options.
     *
     * <p>
     * Similar to
     * {@link #apiKeys(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant api keys
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<SubtenantApiKey> allApiKeys(@Nullable SubtenantApiKeyListOptions options,
                                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        final SubtenantApiKeyListOptions finalOptions = (options == null) ? new SubtenantApiKeyListOptions() : options;
        final Account finalAccount = account;
        return new Paginator<SubtenantApiKey>(finalOptions, new PageRequester<SubtenantApiKey>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<SubtenantApiKey> requestNewPage(ListOptions options) throws MbedCloudException {
                return apiKeys((SubtenantApiKeyListOptions) options, finalAccount);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Similar to
     * {@link #trustedCertificates(Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@Nullable Integer expireEq, @Nullable String ownerEq,
                                  @Nullable SubtenantTrustedCertificateListOptions options,
                                  @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        final Integer finalExpireEq = expireEq;
        final String finalOwnerEq = ownerEq;
        final SubtenantTrustedCertificateListOptions finalOptions = (options == null) ? new SubtenantTrustedCertificateListOptions()
                                                                                      : options;
        final Account finalAccount = account;
        return new Paginator<SubtenantTrustedCertificate>(finalOptions,
                                                          new PageRequester<SubtenantTrustedCertificate>() {
                                                              /**
                                                               * Makes one page request.
                                                               * 
                                                               * @param options
                                                               *            a list options.
                                                               * @return Corresponding page requester
                                                               * @throws MbedCloudException
                                                               *             if an error occurs during the process.
                                                               */
                                                              @Override
                                                              public ListResponse<SubtenantTrustedCertificate>
                                                                     requestNewPage(ListOptions options) throws MbedCloudException {
                                                                  return trustedCertificates(finalExpireEq,
                                                                                             finalOwnerEq,
                                                                                             (SubtenantTrustedCertificateListOptions) options,
                                                                                             finalAccount);
                                                              }
                                                          });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param id
     *            Account ID.
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@NonNull String id, @Nullable Integer expireEq, @Nullable String ownerEq,
                                  @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final Integer finalExpireEq = expireEq;
        final String finalOwnerEq = ownerEq;
        final SubtenantTrustedCertificateListOptions finalOptions = (options == null) ? new SubtenantTrustedCertificateListOptions()
                                                                                      : options;
        return new Paginator<SubtenantTrustedCertificate>(finalOptions,
                                                          new PageRequester<SubtenantTrustedCertificate>() {
                                                              /**
                                                               * Makes one page request.
                                                               * 
                                                               * @param options
                                                               *            a list options.
                                                               * @return Corresponding page requester
                                                               * @throws MbedCloudException
                                                               *             if an error occurs during the process.
                                                               */
                                                              @Override
                                                              public ListResponse<SubtenantTrustedCertificate>
                                                                     requestNewPage(ListOptions options) throws MbedCloudException {
                                                                  return trustedCertificates(finalId, finalExpireEq,
                                                                                             finalOwnerEq,
                                                                                             (SubtenantTrustedCertificateListOptions) options);
                                                              }
                                                          });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Similar to
     * {@link #allTrustedCertificates(String, Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@NonNull String id,
                                  @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        return allTrustedCertificates(id, (Integer) null, (String) null, options);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Similar to
     * {@link #allTrustedCertificates(Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@Nullable SubtenantTrustedCertificateListOptions options,
                                  @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        return allTrustedCertificates((Integer) null, (String) null, options, account);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant user invitations matching filter options.
     *
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant user invitations
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<SubtenantUserInvitation>
           allUserInvitations(@NonNull String id,
                              @Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final SubtenantUserInvitationListOptions finalOptions = (options == null) ? new SubtenantUserInvitationListOptions()
                                                                                  : options;
        return new Paginator<SubtenantUserInvitation>(finalOptions, new PageRequester<SubtenantUserInvitation>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<SubtenantUserInvitation> requestNewPage(ListOptions options) throws MbedCloudException {
                return userInvitations(finalId, (SubtenantUserInvitationListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant user invitations matching filter options.
     *
     * <p>
     * Similar to
     * {@link #userInvitations(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant user invitations
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<SubtenantUserInvitation> allUserInvitations(@Nullable SubtenantUserInvitationListOptions options,
                                                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        final SubtenantUserInvitationListOptions finalOptions = (options == null) ? new SubtenantUserInvitationListOptions()
                                                                                  : options;
        final Account finalAccount = account;
        return new Paginator<SubtenantUserInvitation>(finalOptions, new PageRequester<SubtenantUserInvitation>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<SubtenantUserInvitation> requestNewPage(ListOptions options) throws MbedCloudException {
                return userInvitations((SubtenantUserInvitationListOptions) options, finalAccount);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant users matching filter options.
     *
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant users
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<SubtenantUser> allUsers(@NonNull String id,
                                             @Nullable SubtenantUserListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final SubtenantUserListOptions finalOptions = (options == null) ? new SubtenantUserListOptions() : options;
        return new Paginator<SubtenantUser>(finalOptions, new PageRequester<SubtenantUser>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<SubtenantUser> requestNewPage(ListOptions options) throws MbedCloudException {
                return users(finalId, (SubtenantUserListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant users matching filter options.
     *
     * <p>
     * Similar to
     * {@link #users(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant users
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<SubtenantUser> allUsers(@Nullable SubtenantUserListOptions options,
                                             @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        final SubtenantUserListOptions finalOptions = (options == null) ? new SubtenantUserListOptions() : options;
        final Account finalAccount = account;
        return new Paginator<SubtenantUser>(finalOptions, new PageRequester<SubtenantUser>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<SubtenantUser> requestNewPage(ListOptions options) throws MbedCloudException {
                return users((SubtenantUserListOptions) options, finalAccount);
            }
        });
    }

    /**
     * Get all API keys.
     *
     *
     * <p>
     * Retrieve API keys in an array, optionally filtered by the owner.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys \ -H
     * 'Authorization: Bearer [api_key]' ``` This lists the api keys of the subtenant account.
     *
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant api keys corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<SubtenantApiKey>
           apiKeys(@NonNull String id, @Nullable SubtenantApiKeyListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final SubtenantApiKeyListOptions finalOptions = (options == null) ? new SubtenantApiKeyListOptions() : options;
        return CloudCaller.call(this, "apiKeys()", SubtenantApiKeyAdapter.getListMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoRespList> call() {
                                        return endpoints.getTenantAccountsApiKeysApi()
                                                        .getAllAccountApiKeys(finalId, finalOptions.getPageSize(),
                                                                              finalOptions.getAfter(),
                                                                              finalOptions.getOrder().toString(),
                                                                              ListOptionsEncoder.encodeInclude(finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(SubtenantApiKeyListOptions.TAG_FILTER_BY_KEY,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(SubtenantApiKeyListOptions.TAG_FILTER_BY_OWNER,
                                                                                                                         finalOptions));
                                    }
                                });
    }

    /**
     * Get all API keys.
     *
     *
     * <p>
     * Similar to {@link #apiKeys(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant api keys corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<SubtenantApiKey> apiKeys(@Nullable SubtenantApiKeyListOptions options,
                                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return apiKeys(account.getId(), options);
    }

    /**
     * Clones this instance.
     *
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public Accounts clone() {
        return new Accounts(this);
    }

    /**
     * Adds an account.
     *
     * <p>
     * Similar to {@link #createAccount(String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param account
     *            an account.
     * @return an added account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account createAccount(@NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        return createAccount("create", account);
    }

    /**
     * Adds an account.
     *
     * <p>
     * Create a new account.
     *
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts \ -H 'Authorization: Bearer
     * [api_key]' \ -H 'content-type: application/json' \ -d '{"display_name": "MyAccount1", "admin_name":
     * "accountAdmin1", "email": "example_admin@myaccount.info", "country": "United Kingdom", "end_market": "Smart
     * City", "address_line1": "110 Fulbourn Rd", "city": "Cambridge", "contact": "J. Doe", "company": "Arm"}' ```
     *
     * @param action
     *            Action, either `create` or `enroll`.
     *            <ul>
     *            <li>`create` creates the account where its admin user has ACTIVE status if `admin_password` was
     *            defined in the request, or RESET status if no `admin_password` was defined. If the user already
     *            exists, its status is not modified.</li>
     *            <li>`enroll` creates the account where its admin user has ENROLLING status. If the user already
     *            exists, its status is not modified. Email to finish enrollment or notify the existing user about the
     *            new account is sent to the `admin_email` defined in the request.</li>
     *            </ul>
     *            . Action, either `create` or `enroll`.
     *            <ul>
     *            <li>`create` creates the account where its admin user has ACTIVE status if `admin_password` was
     *            defined in the request, or RESET status if no `admin_password` was defined. If the user already
     *            exists, its status is not modified.</li>
     *            <li>`enroll` creates the account where its admin user has ENROLLING status. If the user already
     *            exists, its status is not modified. Email to finish enrollment or notify the existing user about the
     *            new account is sent to the `admin_email` defined in the request.</li>
     *            </ul>
     * @param account
     *            an account.
     * @return an added account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account createAccount(@Nullable @DefaultValue("create") String action,
                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        final String finalAction = action;
        final Account finalAccount = account;
        return CloudCaller.call(this, "createAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getTenantAccountsAccountsApi()
                                                        .createAccount(AccountAdapter.reverseMapAddRequest(finalAccount),
                                                                       finalAction);
                                    }
                                }, true);
    }

    /**
     * Adds an api key.
     *
     * <p>
     * Create a new API key.
     *
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d '{"name": "MyKey1"}' \ -H
     * 'Authorization: Bearer [api_key]' \ -H 'content-type: application/json' ```
     *
     * @param apiKey
     *            an api key.
     * @return an added api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ApiKey createApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        checkModelValidity(apiKey, TAG_API_KEY);
        final ApiKey finalApiKey = apiKey;
        return CloudCaller.call(this, "createApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getAccountApiKeysApi()
                                                        .createApiKey(ApiKeyAdapter.reverseMapAddRequest(finalApiKey));
                                    }
                                }, true);
    }

    /**
     * Adds a subtenant api key.
     *
     * <p>
     * Create a new API key. There is no default value for the owner ID, and it must be from the same account where the
     * new API key is created.
     *
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys \ -H
     * 'Authorization: Bearer [api_key]' \ -H 'content-type: application/json' \ -d '{"name": "MyKey1"}' ```
     *
     * @param accountId
     *            The ID of the account.
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return an added subtenant api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantApiKey createSubtenantApiKey(@NonNull String accountId,
                                                 @NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        checkModelValidity(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        final String finalAccountId = accountId;
        final SubtenantApiKey finalSubtenantApiKey = subtenantApiKey;
        return CloudCaller.call(this, "createSubtenantApiKey()", SubtenantApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getTenantAccountsApiKeysApi()
                                                        .createAccountApiKey(finalAccountId,
                                                                             SubtenantApiKeyAdapter.reverseMapAddRequest(finalSubtenantApiKey));
                                    }
                                }, true);
    }

    /**
     * Adds a subtenant api key.
     *
     * <p>
     * Similar to {@link #createSubtenantApiKey(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantApiKey createSubtenantApiKey(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        checkNotNull(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        checkModelValidity(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        return createSubtenantApiKey(subtenantApiKey.getAccountId(), subtenantApiKey);
    }

    /**
     * Adds a subtenant user.
     *
     * <p>
     * Create or invite a new user to the account. Only email address is used; other attributes are set in the second
     * step.
     *
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users \ -H
     * 'Authorization: Bearer [api_key]' \ -H 'content-type: application/json' \ -d {"email": "myemail@company.com"} ```
     *
     * @param action
     *            Create or invite user.
     * @param accountId
     *            The ID of the account.
     * @param subtenantUser
     *            a subtenant user.
     * @return an added subtenant user
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUser createSubtenantUser(@Nullable @DefaultValue("create") String action, @NonNull String accountId,
                                             @NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        final String finalAction = action;
        final String finalAccountId = accountId;
        final SubtenantUser finalSubtenantUser = subtenantUser;
        return CloudCaller.call(this, "createSubtenantUser()", SubtenantUserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getTenantAccountsUsersApi()
                                                        .createAccountUser(finalAccountId,
                                                                           SubtenantUserAdapter.reverseMapAddRequest(finalSubtenantUser),
                                                                           finalAction);
                                    }
                                }, true);
    }

    /**
     * Adds a subtenant user.
     *
     * <p>
     * Similar to {@link #createSubtenantUser(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param action
     *            Create or invite user.
     * @param subtenantUser
     *            a subtenant user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUser createSubtenantUser(@Nullable @DefaultValue("create") String action,
                                             @NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        return createSubtenantUser(action, subtenantUser.getAccountId(), subtenantUser);
    }

    /**
     * Adds a subtenant user.
     *
     * <p>
     * Similar to {@link #createSubtenantUser(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUser createSubtenantUser(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        return createSubtenantUser("create", subtenantUser);
    }

    /**
     * Adds a subtenant user invitation.
     *
     * <p>
     * Similar to
     * {@link #createSubtenantUserInvitation(int, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitation)}
     * 
     * @param accountId
     *            The ID of the account the user is invited to.
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return an added subtenant user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           createSubtenantUserInvitation(@NonNull String accountId,
                                         @NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        return createSubtenantUserInvitation(30, accountId, subtenantUserInvitation);
    }

    /**
     * Adds a subtenant user invitation.
     *
     * <p>
     * Similar to
     * {@link #createSubtenantUserInvitation(int, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitation)}
     * 
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           createSubtenantUserInvitation(@NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        return createSubtenantUserInvitation(30, subtenantUserInvitation);
    }

    /**
     * Adds a subtenant user invitation.
     *
     * <p>
     * Invite a new or existing user.
     *
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/accouns/{account_id}/user-invitations \ -H
     * 'Authorization: Bearer [api_key]' \ -H 'content-type: application/json' \ -d {"email": "myemail@company.com"} ```
     *
     * @param validForDays
     *            Specifies how many days the invitation will be valid for.
     * @param accountId
     *            The ID of the account the user is invited to.
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return an added subtenant user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           createSubtenantUserInvitation(@Nullable @DefaultValue("30") int validForDays, @NonNull String accountId,
                                         @NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        checkModelValidity(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        final int finalValidForDays = validForDays;
        final String finalAccountId = accountId;
        final SubtenantUserInvitation finalSubtenantUserInvitation = subtenantUserInvitation;
        return CloudCaller.call(this, "createSubtenantUserInvitation()", SubtenantUserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getTenantAccountsUserInvitationsApi()
                                                        .createAccountInvitation(finalAccountId,
                                                                                 SubtenantUserInvitationAdapter.reverseMapAddRequest(finalSubtenantUserInvitation)
                                                                                                               .validForDays(Integer.valueOf(finalValidForDays)));
                                    }
                                }, true);
    }

    /**
     * Adds a subtenant user invitation.
     *
     * <p>
     * Similar to
     * {@link #createSubtenantUserInvitation(int, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitation)}
     * 
     * @param validForDays
     *            Specifies how many days the invitation will be valid for.
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           createSubtenantUserInvitation(@Nullable @DefaultValue("30") int validForDays,
                                         @NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        checkModelValidity(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        return createSubtenantUserInvitation(validForDays, subtenantUserInvitation.getAccountId(),
                                             subtenantUserInvitation);
    }

    /**
     * Adds a user.
     *
     * <p>
     * Create or invite a new user to the account. Only email address is used; other attributes are set in the second
     * step.
     *
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/users?action=invite \ -H 'Authorization:
     * Bearer [api_key]' \ -H 'content-type: application/json' \ -d {"email": "myemail@company.com"} ```
     *
     * @param action
     *            Action, either `create` or `invite`.
     * @param user
     *            a user.
     * @return an added user
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public User createUser(@Nullable @DefaultValue("create") String action,
                           @NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        checkModelValidity(user, TAG_USER);
        final String finalAction = action;
        final User finalUser = user;
        return CloudCaller.call(this, "createUser()", UserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAccountUsersApi()
                                                        .createUser(UserAdapter.reverseMapAddRequest(finalUser),
                                                                    finalAction);
                                    }
                                }, true);
    }

    /**
     * Adds a user.
     *
     * <p>
     * Similar to {@link #createUser(String, com.arm.mbed.cloud.sdk.accounts.model.User)}
     * 
     * @param user
     *            a user.
     * @return an added user
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public User createUser(@NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        return createUser("create", user);
    }

    /**
     * Adds a user invitation.
     *
     * <p>
     * Similar to {@link #createUserInvitation(int, com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @param userInvitation
     *            a user invitation.
     * @return an added user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UserInvitation createUserInvitation(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        checkNotNull(userInvitation, TAG_USER_INVITATION);
        return createUserInvitation(30, userInvitation);
    }

    /**
     * Adds a user invitation.
     *
     * <p>
     * Invite a new or existing user.
     *
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/user-invitations \ -H 'Authorization: Bearer
     * [api_key]' \ -H 'content-type: application/json' \ -d {"email": "myemail@company.com"} ```
     *
     * @param validForDays
     *            Specifies how many days the invitation will be valid for.
     * @param userInvitation
     *            a user invitation.
     * @return an added user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UserInvitation createUserInvitation(@Nullable @DefaultValue("30") int validForDays,
                                               @NonNull UserInvitation userInvitation) throws MbedCloudException {
        checkNotNull(userInvitation, TAG_USER_INVITATION);
        checkModelValidity(userInvitation, TAG_USER_INVITATION);
        final int finalValidForDays = validForDays;
        final UserInvitation finalUserInvitation = userInvitation;
        return CloudCaller.call(this, "createUserInvitation()", UserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getAccountUserInvitationsApi()
                                                        .createInvitation(UserInvitationAdapter.reverseMapAddRequest(finalUserInvitation)
                                                                                               .validForDays(Integer.valueOf(finalValidForDays)));
                                    }
                                }, true);
    }

    /**
     * Deletes an api key.
     *
     * <p>
     * Similar to {@link #deleteApiKey(String)}
     * 
     * @param apiKey
     *            an api key.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        deleteApiKey(apiKey.getId());
    }

    /**
     * Deletes an api key.
     *
     * <p>
     * Delete the API key.
     *
     * **Example:** ``` curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \ -H 'Authorization:
     * Bearer [api_key]' ```
     *
     * @param id
     *            The ID of the API key to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteApiKey(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteApiKey()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAccountApiKeysApi().deleteApiKey(finalId);
            }
        });
    }

    /**
     * Deletes a subtenant api key.
     *
     * <p>
     * Delete an API key.
     *
     * **Example:** ``` curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}
     * \ -H 'Authorization: Bearer [api_key]' ```
     *
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the API key to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteSubtenantApiKey(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        CloudCaller.call(this, "deleteSubtenantApiKey()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantAccountsApiKeysApi().deleteAccountApiKey(finalAccountId, finalId);
            }
        });
    }

    /**
     * Deletes a subtenant api key.
     *
     * <p>
     * Similar to {@link #deleteSubtenantApiKey(String, String)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteSubtenantApiKey(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        checkNotNull(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        deleteSubtenantApiKey(subtenantApiKey.getAccountId(), subtenantApiKey.getId());
    }

    /**
     * Deletes a subtenant user.
     *
     * <p>
     * Delete a user.
     *
     * **Example:** ``` curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \ -H
     * 'Authorization: Bearer [api_key]' ```
     *
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the user to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteSubtenantUser(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        CloudCaller.call(this, "deleteSubtenantUser()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantAccountsUsersApi().deleteAccountUser(finalAccountId, finalId);
            }
        });
    }

    /**
     * Deletes a subtenant user.
     *
     * <p>
     * Similar to {@link #deleteSubtenantUser(String, String)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteSubtenantUser(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        deleteSubtenantUser(subtenantUser.getAccountId(), subtenantUser.getId());
    }

    /**
     * Deletes a subtenant user invitation.
     *
     * <p>
     * Delete an active user invitation sent to a new or existing user.
     *
     * **Example:** ``` curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} \ -H
     * 'Authorization: Bearer [api_key]' ```
     *
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the invitation to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteSubtenantUserInvitation(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        CloudCaller.call(this, "deleteSubtenantUserInvitation()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantAccountsUserInvitationsApi().deleteAccountInvitation(finalAccountId, finalId);
            }
        });
    }

    /**
     * Deletes a subtenant user invitation.
     *
     * <p>
     * Similar to {@link #deleteSubtenantUserInvitation(String, String)}
     * 
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantUserInvitation(@NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        deleteSubtenantUserInvitation(subtenantUserInvitation.getAccountId(), subtenantUserInvitation.getId());
    }

    /**
     * Deletes a user.
     *
     * <p>
     * Delete a user.
     *
     * **Example:** ``` curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \ -H 'Authorization:
     * Bearer [api_key]' ```
     *
     * @param id
     *            The ID of the user to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteUser(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteUser()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAccountUsersApi().deleteUser(finalId);
            }
        });
    }

    /**
     * Deletes a user.
     *
     * <p>
     * Similar to {@link #deleteUser(String)}
     * 
     * @param user
     *            a user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteUser(@NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        deleteUser(user.getId());
    }

    /**
     * Deletes a user invitation.
     *
     * <p>
     * Delete an active user invitation sent to a new or existing user.
     *
     * **Example:** ``` curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} \ -H
     * 'Authorization: Bearer [api_key]' ```
     *
     * @param id
     *            The ID of the invitation to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteUserInvitation(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteUserInvitation()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getAccountUserInvitationsApi().deleteInvitation(finalId);
            }
        });
    }

    /**
     * Deletes a user invitation.
     *
     * <p>
     * Similar to {@link #deleteUserInvitation(String)}
     * 
     * @param userInvitation
     *            a user invitation.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteUserInvitation(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        checkNotNull(userInvitation, TAG_USER_INVITATION);
        deleteUserInvitation(userInvitation.getId());
    }

    /**
     * Gets module endpoints.
     * 
     * @return endpoints
     */
    @Internal
    public AccountsEndpoints getEndpoints() {
        return endpoints;
    }

    /**
     * Gets module name.
     * 
     * @return module name
     */
    @Override
    @Internal
    public String getModuleName() {
        return "Accounts";
    }

    /**
     * Lists accounts matching filter options.
     *
     * <p>
     * Similar to
     * {@link #listAccounts(String, String, String, com.arm.mbed.cloud.sdk.accounts.model.AccountListOptions)}
     * 
     * @param options
     *            list options.
     * @return the list of accounts corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<Account> listAccounts(@Nullable AccountListOptions options) throws MbedCloudException {
        return listAccounts((String) null, (String) null, (String) null, options);
    }

    /**
     * Lists accounts matching filter options.
     *
     * <p>
     * Returns an array of account objects, optionally filtered by status and tier level.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts \ -H 'Authorization: Bearer
     * [api_key]' ```
     *
     * @param format
     *            Format information for the query response. Supported: format=breakdown.
     * @param properties
     *            Property name returned from account-specific properties.
     * @param parentEq
     *            a string
     * @param options
     *            list options.
     * @return the list of accounts corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<Account> listAccounts(@Nullable String format, @Nullable String properties,
                                              @Nullable String parentEq,
                                              @Nullable AccountListOptions options) throws MbedCloudException {
        final String finalFormat = format;
        final String finalProperties = properties;
        final String finalParentEq = parentEq;
        final AccountListOptions finalOptions = (options == null) ? new AccountListOptions() : options;
        return CloudCaller.call(this, "listAccounts()", AccountAdapter.getListMapper(),
                                new CloudRequest.CloudCall<AccountInfoList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfoList> call() {
                                        return endpoints.getTenantAccountsAccountsApi()
                                                        .getAllAccounts(ListOptionsEncoder.encodeSingleEqualFilter(AccountListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                   finalOptions),
                                                                        ListOptionsEncoder.encodeSingleInFilter(AccountListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                finalOptions),
                                                                        ListOptionsEncoder.encodeSingleNotInFilter(AccountListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                   finalOptions),
                                                                        ListOptionsEncoder.encodeSingleEqualFilter(AccountListOptions.TAG_FILTER_BY_TIER,
                                                                                                                   finalOptions),
                                                                        finalParentEq,
                                                                        ListOptionsEncoder.encodeSingleEqualFilter(AccountListOptions.TAG_FILTER_BY_END_MARKET,
                                                                                                                   finalOptions),
                                                                        ListOptionsEncoder.encodeSingleLikeFilter(AccountListOptions.TAG_FILTER_BY_COUNTRY,
                                                                                                                  finalOptions),
                                                                        finalOptions.getPageSize(),
                                                                        finalOptions.getAfter(),
                                                                        finalOptions.getOrder().toString(),
                                                                        ListOptionsEncoder.encodeInclude(finalOptions),
                                                                        finalFormat, finalProperties);
                                    }
                                });
    }

    /**
     * Creates a {@link Paginator} for the list of accounts matching filter options.
     *
     * <p>
     * Similar to
     * {@link #listAllAccounts(String, String, String, com.arm.mbed.cloud.sdk.accounts.model.AccountListOptions)}
     * 
     * @param options
     *            list options.
     * @return paginator over the list of accounts
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<Account> listAllAccounts(@Nullable AccountListOptions options) throws MbedCloudException {
        return listAllAccounts((String) null, (String) null, (String) null, options);
    }

    /**
     * Creates a {@link Paginator} for the list of accounts matching filter options.
     *
     * <p>
     * Gets an iterator over all accounts matching filter options.
     * 
     * @param format
     *            Format information for the query response. Supported: format=breakdown.
     * @param properties
     *            Property name returned from account-specific properties.
     * @param parentEq
     *            a string
     * @param options
     *            list options.
     * @return paginator over the list of accounts
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<Account> listAllAccounts(@Nullable String format, @Nullable String properties,
                                              @Nullable String parentEq,
                                              @Nullable AccountListOptions options) throws MbedCloudException {
        final String finalFormat = format;
        final String finalProperties = properties;
        final String finalParentEq = parentEq;
        final AccountListOptions finalOptions = (options == null) ? new AccountListOptions() : options;
        return new Paginator<Account>(finalOptions, new PageRequester<Account>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<Account> requestNewPage(ListOptions options) throws MbedCloudException {
                return listAccounts(finalFormat, finalProperties, finalParentEq, (AccountListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of api keys matching filter options.
     *
     * <p>
     * Gets an iterator over all api keys matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of api keys
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<ApiKey> listAllApiKeys(@Nullable ApiKeyListOptions options) throws MbedCloudException {
        final ApiKeyListOptions finalOptions = (options == null) ? new ApiKeyListOptions() : options;
        return new Paginator<ApiKey>(finalOptions, new PageRequester<ApiKey>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<ApiKey> requestNewPage(ListOptions options) throws MbedCloudException {
                return listApiKeys((ApiKeyListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of user invitations matching filter options.
     *
     * <p>
     * Gets an iterator over all user invitations matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of user invitations
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<UserInvitation>
           listAllUserInvitations(@Nullable UserInvitationListOptions options) throws MbedCloudException {
        final UserInvitationListOptions finalOptions = (options == null) ? new UserInvitationListOptions() : options;
        return new Paginator<UserInvitation>(finalOptions, new PageRequester<UserInvitation>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<UserInvitation> requestNewPage(ListOptions options) throws MbedCloudException {
                return listUserInvitations((UserInvitationListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of users matching filter options.
     *
     * <p>
     * Gets an iterator over all users matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of users
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<User> listAllUsers(@Nullable UserListOptions options) throws MbedCloudException {
        final UserListOptions finalOptions = (options == null) ? new UserListOptions() : options;
        return new Paginator<User>(finalOptions, new PageRequester<User>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<User> requestNewPage(ListOptions options) throws MbedCloudException {
                return listUsers((UserListOptions) options);
            }
        });
    }

    /**
     * Lists api keys matching filter options.
     *
     * <p>
     * Retrieve API keys in an array, optionally filtered by the owner.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys \ -H 'Authorization: Bearer
     * [api_key]' ```
     *
     * @param options
     *            list options.
     * @return the list of api keys corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<ApiKey> listApiKeys(@Nullable ApiKeyListOptions options) throws MbedCloudException {
        final ApiKeyListOptions finalOptions = (options == null) ? new ApiKeyListOptions() : options;
        return CloudCaller.call(this, "listApiKeys()", ApiKeyAdapter.getListMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoRespList> call() {
                                        return endpoints.getAccountApiKeysApi()
                                                        .getAllApiKeys(finalOptions.getPageSize(),
                                                                       finalOptions.getAfter(),
                                                                       finalOptions.getOrder().toString(),
                                                                       ListOptionsEncoder.encodeInclude(finalOptions),
                                                                       ListOptionsEncoder.encodeSingleEqualFilter(ApiKeyListOptions.TAG_FILTER_BY_KEY,
                                                                                                                  finalOptions),
                                                                       ListOptionsEncoder.encodeSingleEqualFilter(ApiKeyListOptions.TAG_FILTER_BY_OWNER,
                                                                                                                  finalOptions));
                                    }
                                });
    }

    /**
     * Lists user invitations matching filter options.
     *
     * <p>
     * Retrieve details for all the active user invitations.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/user-invitations \ -H 'Authorization: Bearer
     * [api_key]' ```
     *
     * @param options
     *            list options.
     * @return the list of user invitations corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<UserInvitation>
           listUserInvitations(@Nullable UserInvitationListOptions options) throws MbedCloudException {
        final UserInvitationListOptions finalOptions = (options == null) ? new UserInvitationListOptions() : options;
        return CloudCaller.call(this, "listUserInvitations()", UserInvitationAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInvitationRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationRespList> call() {
                                        return endpoints.getAccountUserInvitationsApi()
                                                        .getAllInvitations(finalOptions.getPageSize(),
                                                                           finalOptions.getAfter(),
                                                                           finalOptions.getOrder().toString(),
                                                                           ListOptionsEncoder.encodeSingleEqualFilter(UserInvitationListOptions.TAG_FILTER_BY_LOGIN_PROFILES,
                                                                                                                      finalOptions));
                                    }
                                });
    }

    /**
     * Lists users matching filter options.
     *
     * <p>
     * Retrieve the details of all users.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/users \ -H 'Authorization: Bearer [api_key]'
     * ```
     *
     * @param options
     *            list options.
     * @return the list of users corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<User> listUsers(@Nullable UserListOptions options) throws MbedCloudException {
        final UserListOptions finalOptions = (options == null) ? new UserListOptions() : options;
        return CloudCaller.call(this, "listUsers()", UserAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInfoRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoRespList> call() {
                                        return endpoints.getAccountUsersApi()
                                                        .getAllUsers(finalOptions.getPageSize(),
                                                                     finalOptions.getAfter(),
                                                                     finalOptions.getOrder().toString(),
                                                                     ListOptionsEncoder.encodeInclude(finalOptions),
                                                                     ListOptionsEncoder.encodeSingleEqualFilter(UserListOptions.TAG_FILTER_BY_EMAIL,
                                                                                                                finalOptions),
                                                                     ListOptionsEncoder.encodeSingleEqualFilter(UserListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                finalOptions),
                                                                     ListOptionsEncoder.encodeSingleInFilter(UserListOptions.TAG_FILTER_BY_STATUS,
                                                                                                             finalOptions),
                                                                     ListOptionsEncoder.encodeSingleNotInFilter(UserListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                finalOptions),
                                                                     ListOptionsEncoder.encodeSingleEqualFilter(UserListOptions.TAG_FILTER_BY_LOGIN_PROFILES,
                                                                                                                finalOptions));
                                    }
                                });
    }

    /**
     * Gets my account.
     *
     * <p>
     * Similar to {@link #myAccount(String, String)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account myAccount() throws MbedCloudException {
        return myAccount((String) null, (String) null);
    }

    /**
     * Gets my account.
     *
     * <p>
     * Retrieve detailed information about the account.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/me?include=policies \ -H
     * 'Authorization: Bearer [api_key]' ``` This is provided by the SDK to avoid listing to retrieve the user's own
     * Account.
     *
     * @param include
     *            Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to return from account-specific properties.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account myAccount(@Nullable String include, @Nullable String properties) throws MbedCloudException {
        final String finalInclude = include;
        final String finalProperties = properties;
        return CloudCaller.call(this, "myAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getAccountProfileApi().getMyAccountInfo(finalInclude,
                                                                                                 finalProperties);
                                    }
                                }, true);
    }

    /**
     * Gets my api key.
     *
     * <p>
     * Retrieve API key details.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/me \ -H 'Authorization: Bearer
     * [api_key]' ``` This is provided by the SDK to avoid listing to retrieve the user's own API Key.
     *
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ApiKey myApiKey() throws MbedCloudException {
        return CloudCaller.call(this, "myApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getAccountApiKeysApi().getMyApiKey();
                                    }
                                }, true);
    }

    /**
     * Gets an account.
     *
     * <p>
     * Similar to {@link #readAccount(String, String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param account
     *            an account.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account readAccount(@NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        return readAccount((String) null, (String) null, account);
    }

    /**
     * Gets an account.
     *
     * <p>
     * Similar to {@link #readAccount(String, String, String)}
     * 
     * @param id
     *            Account ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account readAccount(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        return readAccount((String) null, (String) null, id);
    }

    /**
     * Gets an account.
     *
     * <p>
     * Similar to {@link #readAccount(String, String, String)}
     * 
     * @param include
     *            Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to return from account-specific properties.
     * @param account
     *            an account.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account readAccount(@Nullable String include, @Nullable String properties,
                               @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        return readAccount(include, properties, account.getId());
    }

    /**
     * Gets an account.
     *
     * <p>
     * Retrieve detailed information about an account.
     *
     * **Example:**
     *
     * ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} \ -H 'Authorization: Bearer
     * [api_key]' ```
     *
     * @param include
     *            Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to return from account-specific properties.
     * @param id
     *            Account ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account readAccount(@Nullable String include, @Nullable String properties,
                               @NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalInclude = include;
        final String finalProperties = properties;
        final String finalId = id;
        return CloudCaller.call(this, "readAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getTenantAccountsAccountsApi()
                                                        .getAccountInfo(finalId, finalInclude, finalProperties);
                                    }
                                });
    }

    /**
     * Gets an api key.
     *
     * <p>
     * Similar to {@link #readApiKey(String)}
     * 
     * @param apiKey
     *            an api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ApiKey readApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        return readApiKey(apiKey.getId());
    }

    /**
     * Gets an api key.
     *
     * <p>
     * Retrieve API key details.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \ -H 'Authorization:
     * Bearer [api_key]' ```
     *
     * @param id
     *            The ID of the API key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ApiKey readApiKey(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "readApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getAccountApiKeysApi().getApiKey(finalId);
                                    }
                                });
    }

    /**
     * Gets a subtenant api key.
     *
     * <p>
     * Retrieve API key details.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \
     * -H 'Authorization: Bearer [api_key]' ```
     *
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the API key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantApiKey readSubtenantApiKey(@NonNull String accountId,
                                               @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        return CloudCaller.call(this, "readSubtenantApiKey()", SubtenantApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getTenantAccountsApiKeysApi().getAccountApiKey(finalAccountId,
                                                                                                        finalId);
                                    }
                                });
    }

    /**
     * Gets a subtenant api key.
     *
     * <p>
     * Similar to {@link #readSubtenantApiKey(String, String)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantApiKey readSubtenantApiKey(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        checkNotNull(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        return readSubtenantApiKey(subtenantApiKey.getAccountId(), subtenantApiKey.getId());
    }

    /**
     * Gets a subtenant user.
     *
     * <p>
     * Retrieve user details.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \ -H
     * 'Authorization: Bearer [api_key]' ```
     *
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUser readSubtenantUser(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        return CloudCaller.call(this, "readSubtenantUser()", SubtenantUserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getTenantAccountsUsersApi().getAccountUser(finalAccountId,
                                                                                                    finalId);
                                    }
                                });
    }

    /**
     * Gets a subtenant user.
     *
     * <p>
     * Similar to {@link #readSubtenantUser(String, String)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUser readSubtenantUser(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        return readSubtenantUser(subtenantUser.getAccountId(), subtenantUser.getId());
    }

    /**
     * Gets a subtenant user invitation.
     *
     * <p>
     * Retrieve details of an active user invitation sent for a new or existing user.
     *
     * **Example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} \ -H
     * 'Authorization: Bearer [api_key]' ```
     *
     * @param accountId
     *            The ID of the account the user is invited to.
     * @param id
     *            The ID of the invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUserInvitation readSubtenantUserInvitation(@NonNull String accountId,
                                                               @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        return CloudCaller.call(this, "readSubtenantUserInvitation()", SubtenantUserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getTenantAccountsUserInvitationsApi()
                                                        .getAccountInvitation(finalAccountId, finalId);
                                    }
                                });
    }

    /**
     * Gets a subtenant user invitation.
     *
     * <p>
     * Similar to {@link #readSubtenantUserInvitation(String, String)}
     * 
     * @param subtenantUserInvitation
     *            a subtenant user invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUserInvitation
           readSubtenantUserInvitation(@NonNull SubtenantUserInvitation subtenantUserInvitation) throws MbedCloudException {
        checkNotNull(subtenantUserInvitation, TAG_SUBTENANT_USER_INVITATION);
        return readSubtenantUserInvitation(subtenantUserInvitation.getAccountId(), subtenantUserInvitation.getId());
    }

    /**
     * Gets a user.
     *
     * <p>
     * Retrieve the details of a user.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \ -H 'Authorization: Bearer
     * [api_key]' ```
     *
     * @param id
     *            The ID of the user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public User readUser(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "readUser()", UserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAccountUsersApi().getUser(finalId);
                                    }
                                });
    }

    /**
     * Gets a user.
     *
     * <p>
     * Similar to {@link #readUser(String)}
     * 
     * @param user
     *            a user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public User readUser(@NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        return readUser(user.getId());
    }

    /**
     * Gets a user invitation.
     *
     * <p>
     * Retrieve the details of an active user invitation.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} \ -H
     * 'Authorization: Bearer [api_key]' ```
     *
     * @param id
     *            The ID of the invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UserInvitation readUserInvitation(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "readUserInvitation()", UserInvitationAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInvitationResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationResp> call() {
                                        return endpoints.getAccountUserInvitationsApi().getInvitation(finalId);
                                    }
                                });
    }

    /**
     * Gets a user invitation.
     *
     * <p>
     * Similar to {@link #readUserInvitation(String)}
     * 
     * @param userInvitation
     *            a user invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UserInvitation readUserInvitation(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        checkNotNull(userInvitation, TAG_USER_INVITATION);
        return readUserInvitation(userInvitation.getId());
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Similar to
     * {@link #trustedCertificates(String, Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions)}
     * 
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@Nullable Integer expireEq, @Nullable String ownerEq,
                               @Nullable SubtenantTrustedCertificateListOptions options,
                               @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return trustedCertificates(account.getId(), expireEq, ownerEq, options);
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Retrieve trusted certificates in an array.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates \
     * -H 'Authorization: Bearer [api_key]' ``` This lists the trusted certificates of the subtenant account.
     *
     * @param id
     *            Account ID.
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@NonNull String id, @Nullable Integer expireEq, @Nullable String ownerEq,
                               @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final Integer finalExpireEq = expireEq;
        final String finalOwnerEq = ownerEq;
        final SubtenantTrustedCertificateListOptions finalOptions = (options == null) ? new SubtenantTrustedCertificateListOptions()
                                                                                      : options;
        return CloudCaller.call(this, "trustedCertificates()", SubtenantTrustedCertificateAdapter.getListMapper(),
                                new CloudRequest.CloudCall<TrustedCertificateRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<TrustedCertificateRespList> call() {
                                        return endpoints.getTenantDeviceSecurityCertificatesApi()
                                                        .getAllAccountCertificates(finalId, finalOptions.getPageSize(),
                                                                                   finalOptions.getAfter(),
                                                                                   finalOptions.getOrder().toString(),
                                                                                   ListOptionsEncoder.encodeInclude(finalOptions),
                                                                                   ListOptionsEncoder.encodeSingleEqualFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_NAME,
                                                                                                                              finalOptions),
                                                                                   ListOptionsEncoder.encodeSingleEqualFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_SERVICE,
                                                                                                                              finalOptions),
                                                                                   finalExpireEq,
                                                                                   ListOptionsEncoder.encodeSingleEqualFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_DEVICE_EXECUTION_MODE,
                                                                                                                              Integer.class,
                                                                                                                              finalOptions),
                                                                                   ListOptionsEncoder.encodeSingleNotEqualFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_DEVICE_EXECUTION_MODE,
                                                                                                                                 Integer.class,
                                                                                                                                 finalOptions),
                                                                                   finalOwnerEq,
                                                                                   ListOptionsEncoder.encodeSingleEqualFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_ENROLLMENT_MODE,
                                                                                                                              Boolean.class,
                                                                                                                              finalOptions),
                                                                                   ListOptionsEncoder.encodeSingleEqualFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                              finalOptions),
                                                                                   ListOptionsEncoder.encodeSingleLikeFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_ISSUER,
                                                                                                                             finalOptions),
                                                                                   ListOptionsEncoder.encodeSingleLikeFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_SUBJECT,
                                                                                                                             finalOptions),
                                                                                   ListOptionsEncoder.encodeSingleEqualFilter(SubtenantTrustedCertificateListOptions.TAG_FILTER_BY_VALID,
                                                                                                                              Boolean.class,
                                                                                                                              finalOptions));
                                    }
                                });
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Similar to
     * {@link #trustedCertificates(String, Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@NonNull String id,
                               @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        return trustedCertificates(id, (Integer) null, (String) null, options);
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Similar to
     * {@link #trustedCertificates(Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@Nullable SubtenantTrustedCertificateListOptions options,
                               @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        return trustedCertificates((Integer) null, (String) null, options, account);
    }

    /**
     * Modifies an account.
     *
     * <p>
     * Similar to {@link #updateAccount(String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param account
     *            an account.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account updateAccount(@NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return updateAccount(account.getId(), account);
    }

    /**
     * Modifies an account.
     *
     * <p>
     * Update an account.
     *
     * **Example:**
     *
     * ``` curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} \ -H 'Authorization: Bearer
     * [api_key]' \ -H 'content-type: application/json' \ -d '{"phone_number": "12345678"}' ```
     *
     * @param id
     *            Account ID.
     * @param account
     *            an account.
     * @return an updated account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Account updateAccount(@NonNull String id, @NonNull Account account) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        final String finalId = id;
        final Account finalAccount = account;
        return CloudCaller.call(this, "updateAccount()", AccountAdapter.getMapper(),
                                new CloudRequest.CloudCall<AccountInfo>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<AccountInfo> call() {
                                        return endpoints.getTenantAccountsAccountsApi()
                                                        .updateAccount(finalId,
                                                                       AccountAdapter.reverseMapUpdateRequest(finalAccount));
                                    }
                                }, true);
    }

    /**
     * Modifies an api key.
     *
     * <p>
     * Similar to {@link #updateApiKey(String, com.arm.mbed.cloud.sdk.accounts.model.ApiKey)}
     * 
     * @param apiKey
     *            an api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ApiKey updateApiKey(@NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(apiKey, TAG_API_KEY);
        checkModelValidity(apiKey, TAG_API_KEY);
        return updateApiKey(apiKey.getId(), apiKey);
    }

    /**
     * Modifies an api key.
     *
     * <p>
     * Update API key details.
     *
     * **Example:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \ -H 'Authorization: Bearer
     * [api_key]' \ -H 'content-type: application/json' \ -d '{"name": "TestApiKey25"}' ```
     *
     * @param id
     *            The ID of the API key.
     * @param apiKey
     *            an api key.
     * @return an updated api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ApiKey updateApiKey(@NonNull String id, @NonNull ApiKey apiKey) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        checkNotNull(apiKey, TAG_API_KEY);
        checkModelValidity(apiKey, TAG_API_KEY);
        final String finalId = id;
        final ApiKey finalApiKey = apiKey;
        return CloudCaller.call(this, "updateApiKey()", ApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getAccountApiKeysApi()
                                                        .updateApiKey(finalId,
                                                                      ApiKeyAdapter.reverseMapUpdateRequest(finalApiKey));
                                    }
                                }, true);
    }

    /**
     * Modifies a subtenant api key.
     *
     * <p>
     * Update API key details.
     *
     * **Example:** ``` curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \
     * -H 'Authorization: Bearer [api_key]' \ -H 'content-type: application/json' \ -d '{"name": "TestApiKey25"}' ```
     *
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the API key.
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return an updated subtenant api key
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantApiKey updateSubtenantApiKey(@NonNull String accountId, @NonNull String id,
                                                 @NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        checkNotNull(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        checkModelValidity(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        final String finalAccountId = accountId;
        final String finalId = id;
        final SubtenantApiKey finalSubtenantApiKey = subtenantApiKey;
        return CloudCaller.call(this, "updateSubtenantApiKey()", SubtenantApiKeyAdapter.getMapper(),
                                new CloudRequest.CloudCall<ApiKeyInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<ApiKeyInfoResp> call() {
                                        return endpoints.getTenantAccountsApiKeysApi()
                                                        .updateAccountApiKey(finalAccountId, finalId,
                                                                             SubtenantApiKeyAdapter.reverseMapUpdateRequest(finalSubtenantApiKey));
                                    }
                                }, true);
    }

    /**
     * Modifies a subtenant api key.
     *
     * <p>
     * Similar to {@link #updateSubtenantApiKey(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKey)}
     * 
     * @param subtenantApiKey
     *            a subtenant api key.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantApiKey updateSubtenantApiKey(@NonNull SubtenantApiKey subtenantApiKey) throws MbedCloudException {
        checkNotNull(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        checkModelValidity(subtenantApiKey, TAG_SUBTENANT_API_KEY);
        return updateSubtenantApiKey(subtenantApiKey.getAccountId(), subtenantApiKey.getId(), subtenantApiKey);
    }

    /**
     * Modifies a subtenant user.
     *
     * <p>
     * Update user details.
     *
     * **Example:** ``` curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \ -H
     * 'Authorization: Bearer [api_key]' \ -H 'content-type: application/json' \ -d '{"username": "myusername"}' ```
     *
     * @param accountId
     *            The ID of the account.
     * @param id
     *            The ID of the user.
     * @param subtenantUser
     *            a subtenant user.
     * @return an updated subtenant user
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUser updateSubtenantUser(@NonNull String accountId, @NonNull String id,
                                             @NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        final String finalAccountId = accountId;
        final String finalId = id;
        final SubtenantUser finalSubtenantUser = subtenantUser;
        return CloudCaller.call(this, "updateSubtenantUser()", SubtenantUserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getTenantAccountsUsersApi()
                                                        .updateAccountUser(finalAccountId, finalId,
                                                                           SubtenantUserAdapter.reverseMapUpdateRequest(finalSubtenantUser));
                                    }
                                }, true);
    }

    /**
     * Modifies a subtenant user.
     *
     * <p>
     * Similar to {@link #updateSubtenantUser(String, String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUser)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantUser updateSubtenantUser(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        checkModelValidity(subtenantUser, TAG_SUBTENANT_USER);
        return updateSubtenantUser(subtenantUser.getAccountId(), subtenantUser.getId(), subtenantUser);
    }

    /**
     * Modifies a user.
     *
     * <p>
     * Update user details
     *
     * **Example:** ``` curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \ -H 'Authorization: Bearer
     * [api_key]' \ -H 'content-type: application/json' \ -d '{"username": "myusername"}' ```
     *
     * @param id
     *            The ID of the user.
     * @param user
     *            a user.
     * @return an updated user
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public User updateUser(@NonNull String id, @NonNull User user) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        checkNotNull(user, TAG_USER);
        checkModelValidity(user, TAG_USER);
        final String finalId = id;
        final User finalUser = user;
        return CloudCaller.call(this, "updateUser()", UserAdapter.getMapper(),
                                new CloudRequest.CloudCall<UserInfoResp>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoResp> call() {
                                        return endpoints.getAccountUsersApi()
                                                        .updateUser(finalId,
                                                                    UserAdapter.reverseMapUpdateRequest(finalUser));
                                    }
                                }, true);
    }

    /**
     * Modifies a user.
     *
     * <p>
     * Similar to {@link #updateUser(String, com.arm.mbed.cloud.sdk.accounts.model.User)}
     * 
     * @param user
     *            a user.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public User updateUser(@NonNull User user) throws MbedCloudException {
        checkNotNull(user, TAG_USER);
        checkModelValidity(user, TAG_USER);
        return updateUser(user.getId(), user);
    }

    /**
     * Get the details of all user invitations.
     *
     *
     * <p>
     * Retrieve details of all active user invitations sent for new or existing users.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations \ -H
     * 'Authorization: Bearer [api_key]' ``` This lists the user invitations of the subtenant account.
     *
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant user invitations corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<SubtenantUserInvitation>
           userInvitations(@NonNull String id,
                           @Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final SubtenantUserInvitationListOptions finalOptions = (options == null) ? new SubtenantUserInvitationListOptions()
                                                                                  : options;
        return CloudCaller.call(this, "userInvitations()", SubtenantUserInvitationAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInvitationRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInvitationRespList> call() {
                                        return endpoints.getTenantAccountsUserInvitationsApi()
                                                        .getAllAccountInvitations(finalId, finalOptions.getPageSize(),
                                                                                  finalOptions.getAfter(),
                                                                                  finalOptions.getOrder().toString(),
                                                                                  ListOptionsEncoder.encodeSingleEqualFilter(SubtenantUserInvitationListOptions.TAG_FILTER_BY_LOGIN_PROFILES,
                                                                                                                             finalOptions));
                                    }
                                });
    }

    /**
     * Get the details of all user invitations.
     *
     *
     * <p>
     * Similar to
     * {@link #userInvitations(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant user invitations corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<SubtenantUserInvitation> userInvitations(@Nullable SubtenantUserInvitationListOptions options,
                                                                 @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return userInvitations(account.getId(), options);
    }

    /**
     * Get the details of all users.
     *
     *
     * <p>
     * Retrieve details of all users.
     *
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users \ -H
     * 'Authorization: Bearer [api_key]' ``` This lists the users of the subtenant account.
     *
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant users corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<SubtenantUser> users(@NonNull String id,
                                             @Nullable SubtenantUserListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final SubtenantUserListOptions finalOptions = (options == null) ? new SubtenantUserListOptions() : options;
        return CloudCaller.call(this, "users()", SubtenantUserAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UserInfoRespList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UserInfoRespList> call() {
                                        return endpoints.getTenantAccountsUsersApi()
                                                        .getAllAccountUsers(finalId, finalOptions.getPageSize(),
                                                                            finalOptions.getAfter(),
                                                                            finalOptions.getOrder().toString(),
                                                                            ListOptionsEncoder.encodeInclude(finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(SubtenantUserListOptions.TAG_FILTER_BY_EMAIL,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(SubtenantUserListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(SubtenantUserListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(SubtenantUserListOptions.TAG_FILTER_BY_STATUS,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(SubtenantUserListOptions.TAG_FILTER_BY_LOGIN_PROFILES,
                                                                                                                       finalOptions));
                                    }
                                });
    }

    /**
     * Get the details of all users.
     *
     *
     * <p>
     * Similar to {@link #users(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant users corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<SubtenantUser> users(@Nullable SubtenantUserListOptions options,
                                             @NonNull Account account) throws MbedCloudException {
        checkNotNull(account, TAG_ACCOUNT);
        checkModelValidity(account, TAG_ACCOUNT);
        return users(account.getId(), options);
    }

    /**
     * Validate the user email.
     *
     *
     * <p>
     * Validate user email.
     *
     * **Example:** ``` curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/validate-email \ -H 'Authorization:
     * Bearer [api_key]' ```
     *
     * @param accountId
     *            Account ID.
     * @param id
     *            The ID of the user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void validateEmail(@NonNull String accountId, @NonNull String id) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(id, TAG_ID);
        final String finalAccountId = accountId;
        final String finalId = id;
        CloudCaller.call(this, "validateEmail()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantAccountsUsersApi().validateAccountUserEmail(finalAccountId, finalId);
            }
        }, true);
    }

    /**
     * Validate the user email.
     *
     *
     * <p>
     * Similar to {@link #validateEmail(String, String)}
     * 
     * @param subtenantUser
     *            a subtenant user.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void validateEmail(@NonNull SubtenantUser subtenantUser) throws MbedCloudException {
        checkNotNull(subtenantUser, TAG_SUBTENANT_USER);
        validateEmail(subtenantUser.getAccountId(), subtenantUser.getId());
    }
}
