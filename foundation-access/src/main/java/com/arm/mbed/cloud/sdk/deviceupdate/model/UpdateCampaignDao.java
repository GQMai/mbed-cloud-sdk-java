// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import com.arm.mbed.cloud.sdk.DeviceUpdate;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CrudDao;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;

/**
 * Data Access Object (DAO) for update campaigns.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for update campaigns.")
public class UpdateCampaignDao extends AbstractModelDao<UpdateCampaign> implements CrudDao<UpdateCampaign> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UpdateCampaignDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UpdateCampaignDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UpdateCampaignDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UpdateCampaignDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Creates a {@link Paginator} for the list of campaign device metadatas matching filter options.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#allDeviceMetadata(com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param options
     *            list options.
     * @return paginator over the list of campaign device metadatas
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<CampaignDeviceMetadata>
           allDeviceMetadata(@Nullable CampaignDeviceMetadataListOptions options) throws MbedCloudException {
        return allDeviceMetadata(options, getModel());
    }

    /**
     * Creates a {@link Paginator} for the list of campaign device metadatas matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#allDeviceMetadata(com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param options
     *            list options.
     * @param updateCampaign
     *            an update campaign.
     * @return paginator over the list of campaign device metadatas
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<CampaignDeviceMetadata>
           allDeviceMetadata(@Nullable CampaignDeviceMetadataListOptions options,
                             @NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        return ((DeviceUpdate) getModuleOrThrow()).allDeviceMetadata(options, updateCampaign);
    }

    /**
     * Creates a {@link Paginator} for the list of campaign device metadatas matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#allDeviceMetadata(String, com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions)}
     * 
     * @param id
     *            The update campaign ID. The update campaign ID
     * @param options
     *            list options.
     * @return paginator over the list of campaign device metadatas
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<CampaignDeviceMetadata>
           allDeviceMetadata(@NonNull String id,
                             @Nullable CampaignDeviceMetadataListOptions options) throws MbedCloudException {
        return ((DeviceUpdate) getModuleOrThrow()).allDeviceMetadata(id, options);
    }

    /**
     * Archive a campaign.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#archive(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void archive() throws MbedCloudException {
        archive(getModel());
    }

    /**
     * Archive a campaign.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#archive(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void archive(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).archive(updateCampaign);
    }

    /**
     * Archive a campaign.
     *
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#archive(String)}
     * 
     * @param id
     *            The campaign ID. The campaign ID
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void archive(@NonNull String id) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).archive(id);
    }

    /**
     * Clones this instance.
     *
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    @SuppressWarnings({ "resource", "unused" })
    public UpdateCampaignDao clone() {
        try {
            return new UpdateCampaignDao().configureAndGet(getModuleOrThrow() == null ? null
                                                                                      : getModuleOrThrow().clone());
        } catch (MbedCloudException exception) {
            return null;
        }
    }

    /**
     * Adds an update campaign.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#create(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @return an added update campaign
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UpdateCampaign create() throws MbedCloudException {
        return create(getModel());
    }

    /**
     * Adds an update campaign.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#createUpdateCampaign(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param campaign
     *            an update campaign.
     * @return an added update campaign
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UpdateCampaign create(@NonNull UpdateCampaign campaign) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).createUpdateCampaign(campaign));
    }

    /**
     * Deletes an update campaign.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#delete(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes an update campaign.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deleteUpdateCampaign(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).deleteUpdateCampaign(updateCampaign);
    }

    /**
     * Deletes an update campaign.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deleteUpdateCampaign(String)}
     * 
     * @param id
     *            The ID of the update campaign. The ID of the update campaign
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull String id) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).deleteUpdateCampaign(id);
    }

    /**
     * List all campaign device metadata .
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#deviceMetadata(com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param options
     *            list options.
     * @return the list of campaign device metadatas corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<CampaignDeviceMetadata>
           deviceMetadata(@Nullable CampaignDeviceMetadataListOptions options) throws MbedCloudException {
        return deviceMetadata(options, getModel());
    }

    /**
     * List all campaign device metadata .
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deviceMetadata(com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param options
     *            list options.
     * @param updateCampaign
     *            an update campaign.
     * @return the list of campaign device metadatas corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<CampaignDeviceMetadata>
           deviceMetadata(@Nullable CampaignDeviceMetadataListOptions options,
                          @NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        return ((DeviceUpdate) getModuleOrThrow()).deviceMetadata(options, updateCampaign);
    }

    /**
     * List all campaign device metadata .
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deviceMetadata(String, com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions)}
     * 
     * @param id
     *            The update campaign ID. The update campaign ID
     * @param options
     *            list options.
     * @return the list of campaign device metadatas corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<CampaignDeviceMetadata>
           deviceMetadata(@NonNull String id,
                          @Nullable CampaignDeviceMetadataListOptions options) throws MbedCloudException {
        return ((DeviceUpdate) getModuleOrThrow()).deviceMetadata(id, options);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected UpdateCampaign instantiateModel() {
        return new UpdateCampaign();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new DeviceUpdate(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new DeviceUpdate(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new DeviceUpdate(context);
    }

    /**
     * Gets an update campaign.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#read(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UpdateCampaign read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets an update campaign.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#readUpdateCampaign(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UpdateCampaign read(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).readUpdateCampaign(updateCampaign));
    }

    /**
     * Gets an update campaign.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#readUpdateCampaign(String)}
     * 
     * @param id
     *            The campaign ID. The campaign ID
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UpdateCampaign read(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).readUpdateCampaign(id));
    }

    /**
     * Start a campaign.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#start(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void start() throws MbedCloudException {
        start(getModel());
    }

    /**
     * Start a campaign.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#start(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void start(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).start(updateCampaign);
    }

    /**
     * Start a campaign.
     *
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#start(String)}
     * 
     * @param id
     *            The campaign ID. The campaign ID
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void start(@NonNull String id) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).start(id);
    }

    /**
     * Stop a campaign.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#stop(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void stop() throws MbedCloudException {
        stop(getModel());
    }

    /**
     * Stop a campaign.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#stop(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void stop(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).stop(updateCampaign);
    }

    /**
     * Stop a campaign.
     *
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#stop(String)}
     * 
     * @param id
     *            The campaign ID. The campaign ID
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public void stop(@NonNull String id) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).stop(id);
    }

    /**
     * Modifies an update campaign.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#update(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UpdateCampaign update() throws MbedCloudException {
        return update(getModel());
    }

    /**
     * Modifies an update campaign.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#updateUpdateCampaign(com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UpdateCampaign update(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).updateUpdateCampaign(updateCampaign));
    }

    /**
     * Modifies an update campaign.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignDao#update(String, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param id
     *            The campaign ID. The campaign ID
     * @return an updated update campaign
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UpdateCampaign update(@NonNull String id) throws MbedCloudException {
        return update(id, getModel());
    }

    /**
     * Modifies an update campaign.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#updateUpdateCampaign(String, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param id
     *            The campaign ID. The campaign ID
     * @param campaign
     *            an update campaign.
     * @return an updated update campaign
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UpdateCampaign update(@NonNull String id, @NonNull UpdateCampaign campaign) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).updateUpdateCampaign(id, campaign));
    }
}
