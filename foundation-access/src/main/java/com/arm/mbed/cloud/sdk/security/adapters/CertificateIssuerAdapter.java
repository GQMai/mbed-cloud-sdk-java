// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.adapters;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CertificateIssuerInfo;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CertificateIssuerInfoListResponse;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CertificateIssuerRequest;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CertificateIssuerUpdateRequest;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuer;
import com.arm.mbed.cloud.sdk.security.model.CertificateIssuerType;
import java.util.List;

/**
 * Adapter for certificate issuers.
 */
@Preamble(description = "Adapter for certificate issuers.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class CertificateIssuerAdapter {
    /**
     * Constructor.
     */
    private CertificateIssuerAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps a certificate issuer info into a certificate issuer.
     * 
     * @param toBeMapped
     *            a certificate issuer info.
     * @return mapped a certificate issuer
     */
    @Internal
    public static CertificateIssuer map(CertificateIssuerInfo toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final CertificateIssuer certificateIssuer = new CertificateIssuer(TranslationUtils.toDate(toBeMapped.getCreatedAt()));
        certificateIssuer.setDescription(toBeMapped.getDescription());
        certificateIssuer.setId(toBeMapped.getId());
        certificateIssuer.setIssuerAttributes(toBeMapped.getIssuerAttributes());
        certificateIssuer.setIssuerType(translateToCertificateIssuerType(toBeMapped.getIssuerType()));
        certificateIssuer.setName(toBeMapped.getName());
        return certificateIssuer;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<CertificateIssuerInfo, CertificateIssuer> getMapper() {
        return new GenericAdapter.Mapper<CertificateIssuerInfo, CertificateIssuer>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public CertificateIssuer map(CertificateIssuerInfo toBeMapped) {
                return CertificateIssuerAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps a certificate issuer into a certificate issuer request.
     * 
     * @param toBeMapped
     *            a certificate issuer.
     * @return mapped a certificate issuer request
     */
    @Internal
    public static CertificateIssuerRequest reverseMapAddRequest(CertificateIssuer toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final CertificateIssuerRequest certificateIssuerRequest = new CertificateIssuerRequest();
        certificateIssuerRequest.setDescription(toBeMapped.getDescription());
        certificateIssuerRequest.setIssuerAttributes(toBeMapped.getIssuerAttributes());
        // No field equivalent to issuerCredentials in CertificateIssuerRequest was found in CertificateIssuer
        certificateIssuerRequest.setIssuerType(translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelCertificateissuerrequestIssuertypeenum(toBeMapped.getIssuerType()));
        certificateIssuerRequest.setName(toBeMapped.getName());
        return certificateIssuerRequest;
    }

    /**
     * Maps a certificate issuer info list response into a certificate issuer.
     * 
     * @param toBeMapped
     *            a certificate issuer info list response.
     * @return mapped list response
     */
    @Internal
    public static ListResponse<CertificateIssuer> mapList(CertificateIssuerInfoListResponse toBeMapped) {
        final CertificateIssuerInfoListResponse finalList = toBeMapped;
        final GenericAdapter.RespList<CertificateIssuerInfo> respList = new GenericAdapter.RespList<CertificateIssuerInfo>() {
            /**
             * Executes getAfter.
             * 
             * @return something
             */
            @Override
            public String getAfter() {
                return (finalList == null) ? null : finalList.getAfter();
            }

            /**
             * Executes getContinuationMarker.
             * 
             * @return something
             */
            @Override
            public String getContinuationMarker() {
                return null;
            }

            /**
             * Executes getData.
             * 
             * @return something
             */
            @Override
            public List<CertificateIssuerInfo> getData() {
                return (finalList == null) ? null : finalList.getData();
            }

            /**
             * Executes getHasMore.
             * 
             * @return something
             */
            @Override
            public Boolean getHasMore() {
                return (finalList == null) ? null : finalList.isHasMore();
            }

            /**
             * Executes getLimit.
             * 
             * @return something
             */
            @Override
            public Integer getLimit() {
                return (finalList == null) ? null : finalList.getLimit();
            }

            /**
             * Executes getOrder.
             * 
             * @return something
             */
            @Override
            public String getOrder() {
                return (finalList == null) ? null : finalList.getOrder();
            }

            /**
             * Executes getTotalCount.
             * 
             * @return something
             */
            @Override
            public Integer getTotalCount() {
                return (finalList == null) ? null : finalList.getTotalCount();
            }
        };
        return GenericAdapter.mapList(respList, CertificateIssuerAdapter.getMapper());
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<CertificateIssuerInfoListResponse, ListResponse<CertificateIssuer>>
           getListMapper() {
        return new GenericAdapter.Mapper<CertificateIssuerInfoListResponse, ListResponse<CertificateIssuer>>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public ListResponse<CertificateIssuer> map(CertificateIssuerInfoListResponse toBeMapped) {
                return CertificateIssuerAdapter.mapList(toBeMapped);
            }
        };
    }

    /**
     * Maps a certificate issuer into a certificate issuer update request.
     * 
     * @param toBeMapped
     *            a certificate issuer.
     * @return mapped a certificate issuer update request
     */
    @Internal
    public static CertificateIssuerUpdateRequest reverseMapUpdateRequest(CertificateIssuer toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final CertificateIssuerUpdateRequest certificateIssuerUpdateRequest = new CertificateIssuerUpdateRequest();
        certificateIssuerUpdateRequest.setDescription(toBeMapped.getDescription());
        certificateIssuerUpdateRequest.setIssuerAttributes(toBeMapped.getIssuerAttributes());
        // No field equivalent to issuerCredentials in CertificateIssuerUpdateRequest was found in CertificateIssuer
        certificateIssuerUpdateRequest.setName(toBeMapped.getName());
        return certificateIssuerUpdateRequest;
    }

    /**
     * Maps the enum value.
     * 
     * @param toBeMapped
     *            an issuer type enum.
     * @return mapped enum value
     */
    @Internal
    protected static CertificateIssuerType
              translateToCertificateIssuerType(CertificateIssuerInfo.IssuerTypeEnum toBeMapped) {
        if (toBeMapped == null) {
            return CertificateIssuerType.getUnknownEnum();
        }
        switch (toBeMapped) {
            case GLOBAL_SIGN:
                return CertificateIssuerType.GLOBAL_SIGN;
            case CFSSL_AUTH:
                return CertificateIssuerType.CFSSL_AUTH;
            default:
                return CertificateIssuerType.getUnknownEnum();
        }
    }

    /**
     * Maps the enum value.
     * 
     * @param toBeMapped
     *            a certificate issuer type.
     * @return mapped enum value
     */
    @Internal
    protected static CertificateIssuerRequest.IssuerTypeEnum
              translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelCertificateissuerrequestIssuertypeenum(CertificateIssuerType toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        switch (toBeMapped) {
            case GLOBAL_SIGN:
                return CertificateIssuerRequest.IssuerTypeEnum.GLOBAL_SIGN;
            case CFSSL_AUTH:
                return CertificateIssuerRequest.IssuerTypeEnum.CFSSL_AUTH;
            default:
                return null;
        }
    }
}
