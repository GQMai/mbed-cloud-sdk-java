// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.adapters;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImagePage;
import java.util.List;

/**
 * Adapter for firmware images.
 */
@Preamble(description = "Adapter for firmware images.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class FirmwareImageAdapter {
    /**
     * Constructor.
     */
    private FirmwareImageAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps a firmware image into a firmware image.
     * 
     * @param toBeMapped
     *            a firmware image.
     * @return mapped a firmware image
     */
    @Internal
    public static FirmwareImage
           map(com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final FirmwareImage firmwareImage = new FirmwareImage(TranslationUtils.toDate(toBeMapped.getCreatedAt()),
                                                              toBeMapped.getDatafileChecksum(),
                                                              TranslationUtils.toLong(toBeMapped.getDatafileSize()),
                                                              toBeMapped.getDatafile(),
                                                              TranslationUtils.toDate(toBeMapped.getUpdatedAt()));
        firmwareImage.setDescription(toBeMapped.getDescription());
        firmwareImage.setId(toBeMapped.getId());
        firmwareImage.setName(toBeMapped.getName());
        return firmwareImage;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage,
                                        FirmwareImage>
           getMapper() {
        return new GenericAdapter.Mapper<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage,
                                         FirmwareImage>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public FirmwareImage
                   map(com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage toBeMapped) {
                return FirmwareImageAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps a firmware image page into a firmware image.
     * 
     * @param toBeMapped
     *            a firmware image page.
     * @return mapped list response
     */
    @Internal
    public static ListResponse<FirmwareImage> mapList(FirmwareImagePage toBeMapped) {
        final FirmwareImagePage finalList = toBeMapped;
        final GenericAdapter.RespList<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage> respList = new GenericAdapter.RespList<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage>() {
            /**
             * Executes getAfter.
             * 
             * @return something
             */
            @Override
            public String getAfter() {
                return (finalList == null) ? null : finalList.getAfter();
            }

            /**
             * Executes getContinuationMarker.
             * 
             * @return something
             */
            @Override
            public String getContinuationMarker() {
                return null;
            }

            /**
             * Executes getData.
             * 
             * @return something
             */
            @Override
            public List<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage> getData() {
                return (finalList == null) ? null : finalList.getData();
            }

            /**
             * Executes getHasMore.
             * 
             * @return something
             */
            @Override
            public Boolean getHasMore() {
                return (finalList == null) ? null : finalList.isHasMore();
            }

            /**
             * Executes getLimit.
             * 
             * @return something
             */
            @Override
            public Integer getLimit() {
                return (finalList == null) ? null : finalList.getLimit();
            }

            /**
             * Executes getOrder.
             * 
             * @return something
             */
            @Override
            public String getOrder() {
                return (finalList == null) ? null : finalList.getOrder().toString();
            }

            /**
             * Executes getTotalCount.
             * 
             * @return something
             */
            @Override
            public Integer getTotalCount() {
                return (finalList == null) ? null : finalList.getTotalCount();
            }
        };
        return GenericAdapter.mapList(respList, FirmwareImageAdapter.getMapper());
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<FirmwareImagePage, ListResponse<FirmwareImage>> getListMapper() {
        return new GenericAdapter.Mapper<FirmwareImagePage, ListResponse<FirmwareImage>>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public ListResponse<FirmwareImage> map(FirmwareImagePage toBeMapped) {
                return FirmwareImageAdapter.mapList(toBeMapped);
            }
        };
    }
}
