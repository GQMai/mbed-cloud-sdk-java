// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.adapters;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.devices.model.DeviceEnrollment;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EnrollmentId;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EnrollmentIdentities;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EnrollmentIdentity;
import java.util.List;

/**
 * Adapter for device enrollments.
 */
@Preamble(description = "Adapter for device enrollments.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class DeviceEnrollmentAdapter {
    /**
     * Constructor.
     */
    private DeviceEnrollmentAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps an enrollment identity into a device enrollment.
     * 
     * @param toBeMapped
     *            an enrollment identity.
     * @return mapped a device enrollment
     */
    @Internal
    public static DeviceEnrollment map(EnrollmentIdentity toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final DeviceEnrollment deviceEnrollment = new DeviceEnrollment(toBeMapped.getAccountId(),
                                                                       TranslationUtils.toDate(toBeMapped.getClaimedAt()),
                                                                       TranslationUtils.toDate(toBeMapped.getCreatedAt()),
                                                                       toBeMapped.getEnrolledDeviceId(),
                                                                       TranslationUtils.toDate(toBeMapped.getExpiresAt()));
        deviceEnrollment.setEnrollmentIdentity(toBeMapped.getEnrollmentIdentity());
        deviceEnrollment.setId(toBeMapped.getId());
        return deviceEnrollment;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<EnrollmentIdentity, DeviceEnrollment> getMapper() {
        return new GenericAdapter.Mapper<EnrollmentIdentity, DeviceEnrollment>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public DeviceEnrollment map(EnrollmentIdentity toBeMapped) {
                return DeviceEnrollmentAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps a device enrollment into an enrollment id.
     * 
     * @param toBeMapped
     *            a device enrollment.
     * @return mapped an enrollment id
     */
    @Internal
    public static EnrollmentId reverseMapAddRequest(DeviceEnrollment toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final EnrollmentId enrollmentId = new EnrollmentId();
        enrollmentId.setEnrollmentIdentity(toBeMapped.getEnrollmentIdentity());
        return enrollmentId;
    }

    /**
     * Maps an enrollment identities into a device enrollment.
     * 
     * @param toBeMapped
     *            an enrollment identities.
     * @return mapped list response
     */
    @Internal
    public static ListResponse<DeviceEnrollment> mapList(EnrollmentIdentities toBeMapped) {
        final EnrollmentIdentities finalList = toBeMapped;
        final GenericAdapter.RespList<EnrollmentIdentity> respList = new GenericAdapter.RespList<EnrollmentIdentity>() {
            /**
             * Executes getAfter.
             * 
             * @return something
             */
            @Override
            public String getAfter() {
                return (finalList == null) ? null : finalList.getAfter();
            }

            /**
             * Executes getContinuationMarker.
             * 
             * @return something
             */
            @Override
            public String getContinuationMarker() {
                return null;
            }

            /**
             * Executes getData.
             * 
             * @return something
             */
            @Override
            public List<EnrollmentIdentity> getData() {
                return (finalList == null) ? null : finalList.getData();
            }

            /**
             * Executes getHasMore.
             * 
             * @return something
             */
            @Override
            public Boolean getHasMore() {
                return (finalList == null) ? null : finalList.isHasMore();
            }

            /**
             * Executes getLimit.
             * 
             * @return something
             */
            @Override
            public Integer getLimit() {
                return (finalList == null) ? null : finalList.getLimit();
            }

            /**
             * Executes getOrder.
             * 
             * @return something
             */
            @Override
            public String getOrder() {
                return (finalList == null) ? null : finalList.getOrder().toString();
            }

            /**
             * Executes getTotalCount.
             * 
             * @return something
             */
            @Override
            public Integer getTotalCount() {
                return (finalList == null) ? null : finalList.getTotalCount();
            }
        };
        return GenericAdapter.mapList(respList, DeviceEnrollmentAdapter.getMapper());
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<EnrollmentIdentities, ListResponse<DeviceEnrollment>> getListMapper() {
        return new GenericAdapter.Mapper<EnrollmentIdentities, ListResponse<DeviceEnrollment>>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public ListResponse<DeviceEnrollment> map(EnrollmentIdentities toBeMapped) {
                return DeviceEnrollmentAdapter.mapList(toBeMapped);
            }
        };
    }
}
