// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.Accounts;
import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CreateDao;
import com.arm.mbed.cloud.sdk.common.dao.DeleteDao;
import com.arm.mbed.cloud.sdk.common.dao.ReadDao;

/**
 * Data Access Object (DAO) for user invitations.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for user invitations.")
public class UserInvitationDao extends AbstractModelDao<UserInvitation> implements CreateDao<UserInvitation>,
                               DeleteDao<UserInvitation>, ReadDao<UserInvitation> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UserInvitationDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UserInvitationDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UserInvitationDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UserInvitationDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Clones this instance.
     *
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    @SuppressWarnings({ "resource", "unused" })
    public UserInvitationDao clone() {
        try {
            return new UserInvitationDao().configureAndGet(getModuleOrThrow() == null ? null
                                                                                      : getModuleOrThrow().clone());
        } catch (MbedCloudException exception) {
            return null;
        }
    }

    /**
     * Adds a user invitation.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.UserInvitationDao#create(com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @return an added user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UserInvitation create() throws MbedCloudException {
        return create(getModel());
    }

    /**
     * Adds a user invitation.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createUserInvitation(com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @param userInvitation
     *            a user invitation.
     * @return an added user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UserInvitation create(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createUserInvitation(userInvitation));
    }

    /**
     * Adds a user invitation.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.UserInvitationDao#create(int, com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @param validForDays
     *            Specifies how many days the invitation will be valid for.
     * @return an added user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UserInvitation create(@Nullable @DefaultValue("30") int validForDays) throws MbedCloudException {
        return create(validForDays, getModel());
    }

    /**
     * Adds a user invitation.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createUserInvitation(int, com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @param validForDays
     *            Specifies how many days the invitation will be valid for.
     * @param userInvitation
     *            a user invitation.
     * @return an added user invitation
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UserInvitation create(@Nullable @DefaultValue("30") int validForDays,
                                 @NonNull UserInvitation userInvitation) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createUserInvitation(validForDays, userInvitation));
    }

    /**
     * Deletes a user invitation.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.UserInvitationDao#delete(com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes a user invitation.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteUserInvitation(com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @param userInvitation
     *            a user invitation.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteUserInvitation(userInvitation);
    }

    /**
     * Deletes a user invitation.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#deleteUserInvitation(String)}
     * 
     * @param id
     *            The ID of the invitation to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull String id) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteUserInvitation(id);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected UserInvitation instantiateModel() {
        return new UserInvitation();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Accounts(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Accounts(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Accounts(context);
    }

    /**
     * Gets a user invitation.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.UserInvitationDao#read(com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UserInvitation read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets a user invitation.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#readUserInvitation(com.arm.mbed.cloud.sdk.accounts.model.UserInvitation)}
     * 
     * @param userInvitation
     *            a user invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public UserInvitation read(@NonNull UserInvitation userInvitation) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readUserInvitation(userInvitation));
    }

    /**
     * Gets a user invitation.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readUserInvitation(String)}
     * 
     * @param id
     *            The ID of the invitation.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public UserInvitation read(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readUserInvitation(id));
    }
}
