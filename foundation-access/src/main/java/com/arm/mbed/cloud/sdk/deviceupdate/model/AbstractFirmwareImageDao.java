// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [FirmwareImageDao]
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import com.arm.mbed.cloud.sdk.DeviceUpdate;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CreateDao;
import com.arm.mbed.cloud.sdk.common.dao.DeleteDao;
import com.arm.mbed.cloud.sdk.common.dao.ReadDao;
import com.arm.mbed.cloud.sdk.common.model.DataFile;

/**
 * Data Access Object (DAO) for firmware images.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for firmware images.")
public abstract class AbstractFirmwareImageDao extends AbstractModelDao<FirmwareImage>
                                               implements CreateDao<FirmwareImage>, DeleteDao<FirmwareImage>,
                                               ReadDao<FirmwareImage> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareImageDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareImageDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareImageDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareImageDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Adds a firmware image.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImageDao#create(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage)}
     * 
     * @param firmwareImageFile
     *            The firmware image file to upload. The firmware image file to upload
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareImage create(@NonNull DataFile firmwareImageFile) throws MbedCloudException {
        return create(firmwareImageFile, getModel());
    }

    /**
     * Adds a firmware image.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#createFirmwareImage(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage)}
     * 
     * @param firmwareImageFile
     *            The firmware image file to upload. The firmware image file to upload
     * @param firmwareImage
     *            a firmware image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareImage create(@NonNull DataFile firmwareImageFile,
                                @NonNull FirmwareImage firmwareImage) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).createFirmwareImage(firmwareImageFile,
                                                                                      firmwareImage));
    }

    /**
     * Adds a firmware image.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#createFirmwareImage(com.arm.mbed.cloud.sdk.common.model.DataFile, String, String)}
     * 
     * @param firmwareImageFile
     *            The firmware image file to upload. The firmware image file to upload
     * @param description
     *            The description of the object. The description of the object
     * @param name
     *            The firmware image name. The firmware image name
     * @return an added firmware image
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareImage create(@NonNull DataFile firmwareImageFile, @Nullable String description,
                                @Nullable String name) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).createFirmwareImage(firmwareImageFile, description,
                                                                                      name));
    }

    /**
     * Deletes a firmware image.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImageDao#delete(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes a firmware image.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deleteFirmwareImage(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage)}
     * 
     * @param firmwareImage
     *            a firmware image.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull FirmwareImage firmwareImage) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).deleteFirmwareImage(firmwareImage);
    }

    /**
     * Deletes a firmware image.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deleteFirmwareImage(String)}
     * 
     * @param id
     *            The firmware image ID. The firmware image ID
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull String id) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).deleteFirmwareImage(id);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected FirmwareImage instantiateModel() {
        return new FirmwareImage();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new DeviceUpdate(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new DeviceUpdate(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new DeviceUpdate(context);
    }

    /**
     * Gets a firmware image.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImageDao#read(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public FirmwareImage read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets a firmware image.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#readFirmwareImage(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage)}
     * 
     * @param firmwareImage
     *            a firmware image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareImage read(@NonNull FirmwareImage firmwareImage) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).readFirmwareImage(firmwareImage));
    }

    /**
     * Gets a firmware image.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#readFirmwareImage(String)}
     * 
     * @param id
     *            The firmware image ID. The firmware image ID
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public FirmwareImage read(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).readFirmwareImage(id));
    }
}
