// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.adapters;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsEvents;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EventType;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EventTypeList;
import java.util.List;

/**
 * Adapter for campaign statistics events.
 */
@Preamble(description = "Adapter for campaign statistics events.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class CampaignStatisticsEventsAdapter {
    /**
     * Constructor.
     */
    private CampaignStatisticsEventsAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps an event type into a campaign statistics events.
     * 
     * @param toBeMapped
     *            an event type.
     * @return mapped a campaign statistics events
     */
    @Internal
    public static CampaignStatisticsEvents map(EventType toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final CampaignStatisticsEvents campaignStatisticsEvents = new CampaignStatisticsEvents(TranslationUtils.toInt(toBeMapped.getCount()),
                                                                                               TranslationUtils.toDate(toBeMapped.getCreatedAt()),
                                                                                               toBeMapped.getDescription(),
                                                                                               toBeMapped.getEventType(),
                                                                                               toBeMapped.getSummaryStatus());
        campaignStatisticsEvents.setCampaignId(toBeMapped.getCampaignId());
        campaignStatisticsEvents.setId(toBeMapped.getId());
        campaignStatisticsEvents.setSummaryStatusId(toBeMapped.getSummaryStatusId());
        return campaignStatisticsEvents;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<EventType, CampaignStatisticsEvents> getMapper() {
        return new GenericAdapter.Mapper<EventType, CampaignStatisticsEvents>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public CampaignStatisticsEvents map(EventType toBeMapped) {
                return CampaignStatisticsEventsAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps an event type list into a campaign statistics events.
     * 
     * @param toBeMapped
     *            an event type list.
     * @return mapped list response
     */
    @Internal
    public static ListResponse<CampaignStatisticsEvents> mapList(EventTypeList toBeMapped) {
        final EventTypeList finalList = toBeMapped;
        final GenericAdapter.RespList<EventType> respList = new GenericAdapter.RespList<EventType>() {
            /**
             * Executes getAfter.
             * 
             * @return something
             */
            @Override
            public String getAfter() {
                return (finalList == null) ? null : finalList.getAfter();
            }

            /**
             * Executes getContinuationMarker.
             * 
             * @return something
             */
            @Override
            public String getContinuationMarker() {
                return null;
            }

            /**
             * Executes getData.
             * 
             * @return something
             */
            @Override
            public List<EventType> getData() {
                return (finalList == null) ? null : finalList.getData();
            }

            /**
             * Executes getHasMore.
             * 
             * @return something
             */
            @Override
            public Boolean getHasMore() {
                return (finalList == null) ? null : finalList.isHasMore();
            }

            /**
             * Executes getLimit.
             * 
             * @return something
             */
            @Override
            public Integer getLimit() {
                return (finalList == null) ? null : finalList.getLimit();
            }

            /**
             * Executes getOrder.
             * 
             * @return something
             */
            @Override
            public String getOrder() {
                return (finalList == null) ? null : finalList.getOrder().toString();
            }

            /**
             * Executes getTotalCount.
             * 
             * @return something
             */
            @Override
            public Integer getTotalCount() {
                return (finalList == null) ? null : finalList.getTotalCount();
            }
        };
        return GenericAdapter.mapList(respList, CampaignStatisticsEventsAdapter.getMapper());
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<EventTypeList, ListResponse<CampaignStatisticsEvents>> getListMapper() {
        return new GenericAdapter.Mapper<EventTypeList, ListResponse<CampaignStatisticsEvents>>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public ListResponse<CampaignStatisticsEvents> map(EventTypeList toBeMapped) {
                return CampaignStatisticsEventsAdapter.mapList(toBeMapped);
            }
        };
    }
}
