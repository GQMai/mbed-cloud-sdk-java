// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.Accounts;
import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CreateDao;
import com.arm.mbed.cloud.sdk.common.dao.ReadDao;
import com.arm.mbed.cloud.sdk.common.dao.UpdateDao;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;
import com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificate;
import com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions;

/**
 * Data Access Object (DAO) for accounts.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for accounts.")
public class AccountDao extends AbstractModelDao<Account>
                        implements CreateDao<Account>, UpdateDao<Account>, ReadDao<Account> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AccountDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AccountDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AccountDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AccountDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant api keys matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allApiKeys(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant api keys
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantApiKey>
           allApiKeys(@NonNull String id, @Nullable SubtenantApiKeyListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allApiKeys(id, options);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant api keys matching filter options.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#allApiKeys(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return paginator over the list of subtenant api keys
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantApiKey>
           allApiKeys(@Nullable SubtenantApiKeyListOptions options) throws MbedCloudException {
        return allApiKeys(options, getModel());
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant api keys matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allApiKeys(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant api keys
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantApiKey> allApiKeys(@Nullable SubtenantApiKeyListOptions options,
                                                 @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allApiKeys(options, account);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#allTrustedCertificates(Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@Nullable Integer expireEq, @Nullable String ownerEq,
                                  @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return allTrustedCertificates(expireEq, ownerEq, options, getModel());
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allTrustedCertificates(Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@Nullable Integer expireEq, @Nullable String ownerEq,
                                  @Nullable SubtenantTrustedCertificateListOptions options,
                                  @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allTrustedCertificates(expireEq, ownerEq, options, account);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allTrustedCertificates(String, Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@NonNull String id, @Nullable Integer expireEq, @Nullable String ownerEq,
                                  @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allTrustedCertificates(id, expireEq, ownerEq, options);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allTrustedCertificates(String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@NonNull String id,
                                  @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allTrustedCertificates(id, options);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#allTrustedCertificates(com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return allTrustedCertificates(options, getModel());
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant trusted certificates matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allTrustedCertificates(com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant trusted certificates
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantTrustedCertificate>
           allTrustedCertificates(@Nullable SubtenantTrustedCertificateListOptions options,
                                  @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allTrustedCertificates(options, account);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant user invitations matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allUserInvitations(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant user invitations
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantUserInvitation>
           allUserInvitations(@NonNull String id,
                              @Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allUserInvitations(id, options);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant user invitations matching filter options.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#allUserInvitations(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return paginator over the list of subtenant user invitations
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantUserInvitation>
           allUserInvitations(@Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        return allUserInvitations(options, getModel());
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant user invitations matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allUserInvitations(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant user invitations
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantUserInvitation> allUserInvitations(@Nullable SubtenantUserInvitationListOptions options,
                                                                 @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allUserInvitations(options, account);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant users matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allUsers(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return paginator over the list of subtenant users
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantUser> allUsers(@NonNull String id,
                                             @Nullable SubtenantUserListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allUsers(id, options);
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant users matching filter options.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#allUsers(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return paginator over the list of subtenant users
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantUser> allUsers(@Nullable SubtenantUserListOptions options) throws MbedCloudException {
        return allUsers(options, getModel());
    }

    /**
     * Creates a {@link Paginator} for the list of subtenant users matching filter options.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#allUsers(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return paginator over the list of subtenant users
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Paginator<SubtenantUser> allUsers(@Nullable SubtenantUserListOptions options,
                                             @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).allUsers(options, account);
    }

    /**
     * Get all API keys.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#apiKeys(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant api keys corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantApiKey>
           apiKeys(@NonNull String id, @Nullable SubtenantApiKeyListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).apiKeys(id, options);
    }

    /**
     * Get all API keys.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#apiKeys(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return the list of subtenant api keys corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantApiKey>
           apiKeys(@Nullable SubtenantApiKeyListOptions options) throws MbedCloudException {
        return apiKeys(options, getModel());
    }

    /**
     * Get all API keys.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#apiKeys(com.arm.mbed.cloud.sdk.accounts.model.SubtenantApiKeyListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant api keys corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantApiKey> apiKeys(@Nullable SubtenantApiKeyListOptions options,
                                                 @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).apiKeys(options, account);
    }

    /**
     * Clones this instance.
     *
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    @SuppressWarnings({ "resource", "unused" })
    public AccountDao clone() {
        try {
            return new AccountDao().configureAndGet(getModuleOrThrow() == null ? null : getModuleOrThrow().clone());
        } catch (MbedCloudException exception) {
            return null;
        }
    }

    /**
     * Adds an account.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#create(com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @return an added account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public Account create() throws MbedCloudException {
        return create(getModel());
    }

    /**
     * Adds an account.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#createAccount(com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param account
     *            an account.
     * @return an added account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public Account create(@NonNull Account account) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createAccount(account));
    }

    /**
     * Adds an account.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#create(String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param action
     *            Action, either `create` or `enroll`.
     *            <ul>
     *            <li>`create` creates the account where its admin user has ACTIVE status if `admin_password` was
     *            defined in the request, or RESET status if no `admin_password` was defined. If the user already
     *            exists, its status is not modified.</li>
     *            <li>`enroll` creates the account where its admin user has ENROLLING status. If the user already
     *            exists, its status is not modified. Email to finish enrollment or notify the existing user about the
     *            new account is sent to the `admin_email` defined in the request.</li>
     *            </ul>
     *            . Action, either `create` or `enroll`.
     *            <ul>
     *            <li>`create` creates the account where its admin user has ACTIVE status if `admin_password` was
     *            defined in the request, or RESET status if no `admin_password` was defined. If the user already
     *            exists, its status is not modified.</li>
     *            <li>`enroll` creates the account where its admin user has ENROLLING status. If the user already
     *            exists, its status is not modified. Email to finish enrollment or notify the existing user about the
     *            new account is sent to the `admin_email` defined in the request.</li>
     *            </ul>
     * @return an added account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account create(@Nullable @DefaultValue("create") String action) throws MbedCloudException {
        return create(action, getModel());
    }

    /**
     * Adds an account.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createAccount(String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param action
     *            Action, either `create` or `enroll`.
     *            <ul>
     *            <li>`create` creates the account where its admin user has ACTIVE status if `admin_password` was
     *            defined in the request, or RESET status if no `admin_password` was defined. If the user already
     *            exists, its status is not modified.</li>
     *            <li>`enroll` creates the account where its admin user has ENROLLING status. If the user already
     *            exists, its status is not modified. Email to finish enrollment or notify the existing user about the
     *            new account is sent to the `admin_email` defined in the request.</li>
     *            </ul>
     *            . Action, either `create` or `enroll`.
     *            <ul>
     *            <li>`create` creates the account where its admin user has ACTIVE status if `admin_password` was
     *            defined in the request, or RESET status if no `admin_password` was defined. If the user already
     *            exists, its status is not modified.</li>
     *            <li>`enroll` creates the account where its admin user has ENROLLING status. If the user already
     *            exists, its status is not modified. Email to finish enrollment or notify the existing user about the
     *            new account is sent to the `admin_email` defined in the request.</li>
     *            </ul>
     * @param account
     *            an account.
     * @return an added account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account create(@Nullable @DefaultValue("create") String action,
                          @NonNull Account account) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createAccount(action, account));
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected Account instantiateModel() {
        return new Account();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Accounts(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Accounts(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Accounts(context);
    }

    /**
     * Gets my account.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#myAccount()}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings("PMD.ShortMethodName")
    public Account me() throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).myAccount());
    }

    /**
     * Gets my account.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#myAccount(String, String)}
     * 
     * @param include
     *            Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to return from account-specific properties.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings("PMD.ShortMethodName")
    public Account me(@Nullable String include, @Nullable String properties) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).myAccount(include, properties));
    }

    /**
     * Gets an account.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#read(com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public Account read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets an account.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readAccount(com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param account
     *            an account.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account read(@NonNull Account account) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readAccount(account));
    }

    /**
     * Gets an account.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readAccount(String)}
     * 
     * @param id
     *            Account ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public Account read(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readAccount(id));
    }

    /**
     * Gets an account.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#read(String, String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param include
     *            Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to return from account-specific properties.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account read(@Nullable String include, @Nullable String properties) throws MbedCloudException {
        return read(include, properties, getModel());
    }

    /**
     * Gets an account.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#readAccount(String, String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param include
     *            Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to return from account-specific properties.
     * @param account
     *            an account.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account read(@Nullable String include, @Nullable String properties,
                        @NonNull Account account) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readAccount(include, properties, account));
    }

    /**
     * Gets an account.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readAccount(String, String, String)}
     * 
     * @param include
     *            Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.
     * @param properties
     *            Property name to return from account-specific properties.
     * @param id
     *            Account ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account read(@Nullable String include, @Nullable String properties,
                        @NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readAccount(include, properties, id));
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#trustedCertificates(Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@Nullable Integer expireEq, @Nullable String ownerEq,
                               @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return trustedCertificates(expireEq, ownerEq, options, getModel());
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#trustedCertificates(Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@Nullable Integer expireEq, @Nullable String ownerEq,
                               @Nullable SubtenantTrustedCertificateListOptions options,
                               @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).trustedCertificates(expireEq, ownerEq, options, account);
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#trustedCertificates(String, Integer, String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param expireEq
     *            an integer
     * @param ownerEq
     *            a string
     * @param options
     *            list options.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@NonNull String id, @Nullable Integer expireEq, @Nullable String ownerEq,
                               @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).trustedCertificates(id, expireEq, ownerEq, options);
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#trustedCertificates(String, com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@NonNull String id,
                               @Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).trustedCertificates(id, options);
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#trustedCertificates(com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@Nullable SubtenantTrustedCertificateListOptions options) throws MbedCloudException {
        return trustedCertificates(options, getModel());
    }

    /**
     * Get all trusted certificates.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#trustedCertificates(com.arm.mbed.cloud.sdk.security.model.SubtenantTrustedCertificateListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant trusted certificates corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantTrustedCertificate>
           trustedCertificates(@Nullable SubtenantTrustedCertificateListOptions options,
                               @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).trustedCertificates(options, account);
    }

    /**
     * Modifies an account.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#update(com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public Account update() throws MbedCloudException {
        return update(getModel());
    }

    /**
     * Modifies an account.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#updateAccount(com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param account
     *            an account.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public Account update(@NonNull Account account) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateAccount(account));
    }

    /**
     * Modifies an account.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#update(String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param id
     *            Account ID.
     * @return an updated account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account update(@NonNull String id) throws MbedCloudException {
        return update(id, getModel());
    }

    /**
     * Modifies an account.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateAccount(String, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param id
     *            Account ID.
     * @param account
     *            an account.
     * @return an updated account
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public Account update(@NonNull String id, @NonNull Account account) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateAccount(id, account));
    }

    /**
     * Get the details of all user invitations.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#userInvitations(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant user invitations corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantUserInvitation>
           userInvitations(@NonNull String id,
                           @Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).userInvitations(id, options);
    }

    /**
     * Get the details of all user invitations.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#userInvitations(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return the list of subtenant user invitations corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantUserInvitation>
           userInvitations(@Nullable SubtenantUserInvitationListOptions options) throws MbedCloudException {
        return userInvitations(options, getModel());
    }

    /**
     * Get the details of all user invitations.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#userInvitations(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserInvitationListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant user invitations corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantUserInvitation> userInvitations(@Nullable SubtenantUserInvitationListOptions options,
                                                                 @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).userInvitations(options, account);
    }

    /**
     * Get the details of all users.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#users(String, com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions)}
     * 
     * @param id
     *            Account ID.
     * @param options
     *            list options.
     * @return the list of subtenant users corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantUser> users(@NonNull String id,
                                             @Nullable SubtenantUserListOptions options) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).users(id, options);
    }

    /**
     * Get the details of all users.
     *
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.AccountDao#users(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @return the list of subtenant users corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantUser> users(@Nullable SubtenantUserListOptions options) throws MbedCloudException {
        return users(options, getModel());
    }

    /**
     * Get the details of all users.
     *
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#users(com.arm.mbed.cloud.sdk.accounts.model.SubtenantUserListOptions, com.arm.mbed.cloud.sdk.accounts.model.Account)}
     * 
     * @param options
     *            list options.
     * @param account
     *            an account.
     * @return the list of subtenant users corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public ListResponse<SubtenantUser> users(@Nullable SubtenantUserListOptions options,
                                             @NonNull Account account) throws MbedCloudException {
        return ((Accounts) getModuleOrThrow()).users(options, account);
    }
}
