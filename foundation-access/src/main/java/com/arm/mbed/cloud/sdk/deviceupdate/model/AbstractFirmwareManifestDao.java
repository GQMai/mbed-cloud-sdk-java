// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated abstract class. Do not modify its contents.
// Code customisation should happen in the child class [FirmwareManifestDao]
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import com.arm.mbed.cloud.sdk.DeviceUpdate;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CreateDao;
import com.arm.mbed.cloud.sdk.common.dao.DeleteDao;
import com.arm.mbed.cloud.sdk.common.dao.ReadDao;
import com.arm.mbed.cloud.sdk.common.model.DataFile;

/**
 * Data Access Object (DAO) for firmware manifests.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for firmware manifests.")
public abstract class AbstractFirmwareManifestDao extends AbstractModelDao<FirmwareManifest>
                                                  implements CreateDao<FirmwareManifest>, DeleteDao<FirmwareManifest>,
                                                  ReadDao<FirmwareManifest> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareManifestDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareManifestDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareManifestDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public AbstractFirmwareManifestDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Adds a firmware manifest.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifestDao#create(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareManifest create(@NonNull DataFile firmwareManifestFile) throws MbedCloudException {
        return create(firmwareManifestFile, getModel());
    }

    /**
     * Adds a firmware manifest.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifestDao#create(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size.
     * @param keyTableFile
     *            The key table of pre-shared keys for devices. The key table of pre-shared keys for devices
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareManifest create(@NonNull DataFile firmwareManifestFile,
                                   @Nullable DataFile keyTableFile) throws MbedCloudException {
        return create(firmwareManifestFile, keyTableFile, getModel());
    }

    /**
     * Adds a firmware manifest.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#createFirmwareManifest(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size.
     * @param keyTableFile
     *            The key table of pre-shared keys for devices. The key table of pre-shared keys for devices
     * @param firmwareManifest
     *            a firmware manifest.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareManifest create(@NonNull DataFile firmwareManifestFile, @Nullable DataFile keyTableFile,
                                   @NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).createFirmwareManifest(firmwareManifestFile,
                                                                                         keyTableFile,
                                                                                         firmwareManifest));
    }

    /**
     * Adds a firmware manifest.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#createFirmwareManifest(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.common.model.DataFile, String, String)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size.
     * @param keyTableFile
     *            The key table of pre-shared keys for devices. The key table of pre-shared keys for devices
     * @param description
     *            The description of the firmware manifest. The description of the firmware manifest
     * @param name
     *            The name of the object. The name of the object
     * @return an added firmware manifest
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareManifest create(@NonNull DataFile firmwareManifestFile, @Nullable DataFile keyTableFile,
                                   @Nullable String description, @Nullable String name) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).createFirmwareManifest(firmwareManifestFile,
                                                                                         keyTableFile, description,
                                                                                         name));
    }

    /**
     * Adds a firmware manifest.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#createFirmwareManifest(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size.
     * @param firmwareManifest
     *            a firmware manifest.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareManifest create(@NonNull DataFile firmwareManifestFile,
                                   @NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).createFirmwareManifest(firmwareManifestFile,
                                                                                         firmwareManifest));
    }

    /**
     * Deletes a firmware manifest.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifestDao#delete(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes a firmware manifest.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deleteFirmwareManifest(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @param firmwareManifest
     *            a firmware manifest.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).deleteFirmwareManifest(firmwareManifest);
    }

    /**
     * Deletes a firmware manifest.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#deleteFirmwareManifest(String)}
     * 
     * @param id
     *            The firmware manifest ID. The firmware manifest ID
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull String id) throws MbedCloudException {
        ((DeviceUpdate) getModuleOrThrow()).deleteFirmwareManifest(id);
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected FirmwareManifest instantiateModel() {
        return new FirmwareManifest();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new DeviceUpdate(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new DeviceUpdate(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new DeviceUpdate(context);
    }

    /**
     * Gets a firmware manifest.
     *
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifestDao#read(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public FirmwareManifest read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets a firmware manifest.
     *
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.DeviceUpdate#readFirmwareManifest(com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @param firmwareManifest
     *            a firmware manifest.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public FirmwareManifest read(@NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).readFirmwareManifest(firmwareManifest));
    }

    /**
     * Gets a firmware manifest.
     *
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.DeviceUpdate#readFirmwareManifest(String)}
     * 
     * @param id
     *            The firmware manifest ID. The firmware manifest ID
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public FirmwareManifest read(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((DeviceUpdate) getModuleOrThrow()).readFirmwareManifest(id));
    }
}
