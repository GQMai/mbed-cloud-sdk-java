version: 2

sdk_environment: &sdk_environment
  PROJECT_NAME: mbed-cloud-sdk-java
  TESTRUNNER_DOCKER_IMAGE: 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner
  BUILD_REPORTS_DIR: ./build/reports
  BUILD_JARS_DIR: ./build/libs
  BUILD_DIST_DIR: ./build/distributions
  BUILD_DOCS_DIR: ./build/docs/javadoc
  BUILD_UNIT_TEST_RESULT_DIR: ./build/test-results/test
  BUILD_UNIT_TEST_COVERAGE_DIR: ./build/jacoco
  TEST_COVERAGE_DIR: ./coverage_files
  BUILD_INTEGRATION_TEST_RESULT_DIR: ./results
  BUILD_INTEGRATION_TEST_COVERAGE_DIR: ./build/coverage-results
  SCRIPTS_DIR: ./scripts
  SCRIPT_COMMAND: python3 ./scripts/sdk.py
  ARTIFACTORY_URL: http://localhost:80/artifactory/
  AWS_DEFAULT_REGION: us-west-2
  SUDO_COMMAND: sudo
  PIP_COMMAND: pip3
  WORKING_DIR: ~/mbed-java-sdk
  GRADLE_USER_HOME: ~/mbed-java-sdk/.gradle/

setting_machine_environment: &setting_machine_environment
    name: Setting up the environment
    command: >
      export SUDO_COMMAND=""
      && echo "export SUDO_COMMAND=${SUDO_COMMAND}" >> ${BASH_ENV}
      && export PIP_COMMAND=pip
      && echo "export PIP_COMMAND=${PIP_COMMAND}" >> ${BASH_ENV}
      && export PYTHON_COMMAND=python
      && echo "export PYTHON_COMMAND=${PYTHON_COMMAND}" >> ${BASH_ENV}
      && export PROJECT_NAME=${PROJECT_NAME}
      && echo "export PROJECT_NAME=${PROJECT_NAME}" >> ${BASH_ENV}
      && export TESTRUNNER_DOCKER_IMAGE=${TESTRUNNER_DOCKER_IMAGE}
      && echo "export TESTRUNNER_DOCKER_IMAGE=${TESTRUNNER_DOCKER_IMAGE}" >> ${BASH_ENV}
      && export BUILD_REPORTS_DIR=${BUILD_REPORTS_DIR}
      && echo "export BUILD_REPORTS_DIR=${BUILD_REPORTS_DIR}" >> ${BASH_ENV}
      && export BUILD_JARS_DIR=${BUILD_JARS_DIR}
      && echo "export BUILD_JARS_DIR=${BUILD_JARS_DIR}" >> ${BASH_ENV}
      && export BUILD_DIST_DIR=${BUILD_DIST_DIR}
      && echo "export BUILD_DIST_DIR=${BUILD_DIST_DIR}" >> ${BASH_ENV}
      && export BUILD_DOCS_DIR=${BUILD_DOCS_DIR}
      && echo "export BUILD_DOCS_DIR=${BUILD_DOCS_DIR}" >> ${BASH_ENV}
      && export BUILD_UNIT_TEST_RESULT_DIR=${BUILD_UNIT_TEST_RESULT_DIR}
      && echo "export BUILD_UNIT_TEST_RESULT_DIR=${BUILD_UNIT_TEST_RESULT_DIR}" >> ${BASH_ENV}
      && export BUILD_UNIT_TEST_COVERAGE_DIR=${BUILD_UNIT_TEST_COVERAGE_DIR}
      && echo "export BUILD_UNIT_TEST_COVERAGE_DIR=${BUILD_UNIT_TEST_COVERAGE_DIR}" >> ${BASH_ENV}
      && export BUILD_INTEGRATION_TEST_RESULT_DIR=${BUILD_INTEGRATION_TEST_RESULT_DIR}
      && echo "export BUILD_INTEGRATION_TEST_RESULT_DIR=${BUILD_INTEGRATION_TEST_RESULT_DIR}" >> ${BASH_ENV}
      && export BUILD_INTEGRATION_TEST_COVERAGE_DIR=${BUILD_INTEGRATION_TEST_COVERAGE_DIR}
      && echo "export BUILD_INTEGRATION_TEST_COVERAGE_DIR=${BUILD_INTEGRATION_TEST_COVERAGE_DIR}" >> ${BASH_ENV}
      && export SCRIPTS_DIR=${SCRIPTS_DIR}
      && echo "export SCRIPTS_DIR=${SCRIPTS_DIR}" >> ${BASH_ENV}
      && export SCRIPT_COMMAND="${PYTHON_COMMAND} ./scripts/sdk.py"
      && echo "export SCRIPT_COMMAND='${PYTHON_COMMAND} ./scripts/sdk.py'" >> ${BASH_ENV}
      && export ARTIFACTORY_URL=http://localhost:5000/artifactory/
      && echo "export ARTIFACTORY_URL=http://localhost:5000/artifactory/" >> ${BASH_ENV}
      && export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      && echo "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}" >> ${BASH_ENV}
      && export SUDO_COMMAND=${SUDO_COMMAND}
      && echo "export ${SUDO_COMMAND}=" >> ${BASH_ENV}
      && export WORKING_DIR=${WORKING_DIR}
      && echo "export WORKING_DIR=${WORKING_DIR}" >> ${BASH_ENV}
      && export GRADLE_USER_HOME=${GRADLE_USER_HOME}
      && echo "export GRADLE_USER_HOME=${GRADLE_USER_HOME}" >> ${BASH_ENV}

production_environment: &production_environment
  IS_PRODUCTION_TESTING: 'true'
  PIP_COMMAND: pip

os2_environment: &os2_environment
  PIP_COMMAND: pip

working_directory: &working_directory
  working_directory: ~/mbed-java-sdk

get_cached_job_dependencies: &get_cached_job_dependencies
  restore_cache:
       key: -{{ checksum "build.gradle" }}

cache_job_dependencies: &cache_job_dependencies
  save_cache:
          key: -{{ checksum "build.gradle" }}
          paths:
            - .gradle/

persist_build: &persist_build
  persist_to_workspace:
    root: ./
    paths:
      - build/
      - backends/
      - pelion-sdk-core/
      - foundation-core/
      - foundation-models/
      - foundation-access/
      - support-annotations/
      - lwm2m/
      - .gradle/
      - gradle.properties
      - artifacts.properties
      - CHANGELOG.md

attach_build: &attach_build
  attach_workspace:
   at: ./

store_logs: &store_logs
  store_artifacts:
          path: ./build_logs
          destination: logs

store_reports: &store_reports  
  store_artifacts:
          path: ./build/reports
          destination: reports

store_artifact_file: &store_artifact_file  
  store_artifacts:
          path: ./artifacts.properties
          destination: artifacts
          
anchors:
  &job_image circleci/openjdk:8-jdk-stretch-browsers

java_job_environment: &java_job_environment
  docker:
    - image: *job_image
      environment:
        <<: *sdk_environment
  <<: *working_directory

machine_definition: &machine_definition
  machine:
      image: circleci/classic:latest
      enabled: true

install_python: &install_python
  run:
      name: Installing python 3
      command: >
        ${SUDO_COMMAND} apt-get update
        && DEBIAN_FRONTEND=noninteractive
        && ${SUDO_COMMAND} apt-get install -y python3
        && echo 'alias python=python3' >> ~/.bashrc
        && ${SUDO_COMMAND} apt-get install -y python3-pip
        && ${SUDO_COMMAND} apt-get install -y python-setuptools
        && ${SUDO_COMMAND} apt-get install -y openssl
        && ${SUDO_COMMAND} apt-get install -y libssl-dev
        && echo 'alias pip=pip3' >> ~/.bashrc
        && ${SUDO_COMMAND} rm -rf /var/lib/apt/lists/*
        && ${SUDO_COMMAND} apt-get clean
      environment:
        <<: *sdk_environment

install_aws_tools: &install_aws_tools
  run:
      name: Installing aws cli
      command: >
        ${SUDO_COMMAND} ${PIP_COMMAND} install -U pip
        && ${SUDO_COMMAND} ${PIP_COMMAND} install awscli
        && ${PIP_COMMAND} list
      environment:
        <<: *sdk_environment

install_sdk_tools_definition: &install_sdk_tools_definition
  name: Installing SDK tools
  command: >
    echo ${SUDO_COMMAND}
    && ${SUDO_COMMAND} ${PIP_COMMAND} install -U pip
    && ${SUDO_COMMAND} ${PIP_COMMAND} install -r ${SCRIPTS_DIR}/requirements.txt
    && ${PIP_COMMAND} list

install_sdk_tools: &install_sdk_tools
  run:
      <<: *install_sdk_tools_definition
      environment:
        <<: *sdk_environment

jobs:
 pullTestRunner:
  <<: *java_job_environment
  steps:
    - checkout
    - setup_remote_docker # See https://circleci.com/docs/2.0/building-docker-images/
    - <<: *get_cached_job_dependencies
    - <<: *install_python
    - <<: *install_aws_tools
    - <<: *install_sdk_tools
    - run: ${SCRIPT_COMMAND} dependencies
    - run: python3 ${SCRIPTS_DIR}/sdk.py fetch_test_runner
    - run: python3 ${SCRIPTS_DIR}/sdk.py cache_testrunner
    - <<: *store_logs
    - <<: *persist_build
    - <<: *cache_job_dependencies

 deploySDK:
  <<: *java_job_environment
  steps:
    - checkout
    - setup_remote_docker # See https://circleci.com/docs/2.0/building-docker-images/
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_aws_tools
    - <<: *install_sdk_tools
    - run: python3 ${SCRIPTS_DIR}/sdk.py retrieve_testserver
    - run:
        name: Setting up artifactory
        command: >
          aws s3 sync s3://artifactory-store ./
          && ( cd proxy &&  docker build -t artifactory . )
          && ( docker run -d --name artifactory artifactory && sleep 10 )
    - run:
        name: Deploying the SDK to Artifactory and beyond
        command: docker run --rm --network container:artifactory sdk_test_server python3 -u scripts/sdk.py deploy
        no_output_timeout:  1h
    - run: python3 ${SCRIPTS_DIR}/sdk.py notify
    - <<: *store_logs
    - <<: *store_artifact_file
    - <<: *persist_build

 versioning:
  <<: *java_job_environment
  steps:
    - checkout
    - setup_remote_docker # See https://circleci.com/docs/2.0/building-docker-images/
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    - run: python3 ${SCRIPTS_DIR}/sdk.py retrieve_testrunner
    - run: python3 ${SCRIPTS_DIR}/sdk.py versioning
    - run: python3 ${SCRIPTS_DIR}/sdk.py changelog
    - store_artifacts:
        path: CHANGELOG.md
        destination: CHANGELOG.md
    - <<: *store_logs
    - <<: *store_artifact_file
    - <<: *persist_build

 release_versioning:
  <<: *java_job_environment
  steps:
    - checkout
    - setup_remote_docker # See https://circleci.com/docs/2.0/building-docker-images/
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    - run:
        name: Reset modified files back to original
        command: >
          rm gradle.properties 
          && rm CHANGELOG.md
    - checkout
    - run: python3 ${SCRIPTS_DIR}/sdk.py retrieve_testrunner
    - run: python3 ${SCRIPTS_DIR}/sdk.py versioning_release
    - run: python3 ${SCRIPTS_DIR}/sdk.py changelog
    - store_artifacts:
        path: CHANGELOG.md
        destination: CHANGELOG.md
    - <<: *store_logs
    - <<: *store_artifact_file

 build_documentation:
    docker:
      - image: circleci/node:jessie-browsers
    steps:
      - run:
          name: Trigger documentation build
          command: |
              curl -X POST --header "Content-Type: application/json" \
               -d '{"branch":"master"}' \
               https://circleci.com/api/v1.1/project/github/${ORGANISATION}/${DOCUMENTATION_PROJECT}/build?circle-token=${CIRCLE_TOKEN}
 build:
  <<: *java_job_environment
  steps:
    - checkout
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    # - run: ${SCRIPT_COMMAND} dependencies
    - run: ${SCRIPT_COMMAND} fetch_generator_info
    - run: ${SCRIPT_COMMAND} generate_foundation
    - run: ${SCRIPT_COMMAND} configure
    - run: ${SCRIPT_COMMAND} license
    - run: ${SCRIPT_COMMAND} build
    - <<: *persist_build
    - store_artifacts:
          path: build/distributions
          destination: artifacts
    - store_artifacts:
          path: build/libs
          destination: artifacts
    - <<: *store_logs
    - <<: *store_artifact_file

 quality_report:
  <<: *java_job_environment
  steps:
    - checkout
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    - run: ${SCRIPT_COMMAND} report_code_coverage
    - run: ${SCRIPT_COMMAND} generate_quality_summary
    - run:
        name: Reporting coverage to CodeCov
        command: bash <(curl -s https://codecov.io/bash) -f ${BUILD_REPORTS_DIR}/jacoco-all/coverage.xml
    - run:
        name: Reporting foundation coverage to CodeCov
        command: bash <(curl -s https://codecov.io/bash) -f ${BUILD_REPORTS_DIR}/jacoco-foundation/coverage.xml
    - <<: *persist_build
    - <<: *store_reports
    - <<: *store_logs
    - <<: *store_artifact_file

 documentation:
  <<: *java_job_environment
  steps:
    - checkout
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_aws_tools
    - <<: *install_sdk_tools
    # - run: ${SCRIPT_COMMAND} dependencies
    - run: ${SCRIPT_COMMAND} documentation
    - run:
        name: Publishing temporary documentation online
        command: >
          OUT_PATH=${PROJECT_NAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}-branch
          && aws s3 sync --delete --cache-control max-age=3600 ${BUILD_DOCS_DIR} s3://${OUT_PATH}
          && echo 'SDK javadoc for this build is now available here:'
          && echo https://s3-us-west-2.amazonaws.com/${OUT_PATH}/index.html
    # - <<: *persist_build
    - store_artifacts:
        path: build/docs/javadoc
        destination: docs
    - <<: *store_logs
    - <<: *store_artifact_file

 static_analysis:
  <<: *java_job_environment
  steps:
    - checkout
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    # - run: ${SCRIPT_COMMAND} dependencies
    - run: ${SCRIPT_COMMAND} static_analysis
    # - <<: *persist_build
    - <<: *store_reports
    - <<: *store_logs
    - <<: *store_artifact_file

 build_test_server:
  <<: *java_job_environment
  steps:
    - checkout
    - setup_remote_docker # See https://circleci.com/docs/2.0/building-docker-images/
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    - run: ${SCRIPT_COMMAND} buid_test_server_image
    - run: ${SCRIPT_COMMAND} cache_testserver
    - <<: *persist_build
    - <<: *store_logs
    - <<: *store_artifact_file

 unit_tests:
  <<: *java_job_environment
  steps:
    - checkout
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    # - run: ${SCRIPT_COMMAND} dependencies
    - run: ${SCRIPT_COMMAND} unit_tests
    - run: ${SCRIPT_COMMAND} gather_code_coverage_files
    - persist_to_workspace:
        root: ./
        paths:
          - build/test-results/test
          - build/reports/tests
          - coverage_files/
    - store_test_results:
        path: build/test-results/test
    - <<: *store_reports
    - <<: *store_logs
    - <<: *store_artifact_file

 run_production_integration_tests:
  <<: *machine_definition
  steps:
    - checkout
    - run:
        <<: *setting_machine_environment
        environment:
          <<: [*sdk_environment, *production_environment]
    - run:
        name: Setting up Production environment
        command: >
          export IS_PRODUCTION_TESTING="true"
          && echo "export IS_PRODUCTION_TESTING='true'" >> ${BASH_ENV}
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_sdk_tools
    - run: ${SCRIPT_COMMAND} retrieve_testrunner
    - run: ${SCRIPT_COMMAND} retrieve_testserver
    - run:
        name: Running integration tests against production
        command: ${SCRIPT_COMMAND} run_integration_tests
        no_output_timeout: 20m
    - run:
        name: Copying test results
        command: >
          mkdir -p ${BUILD_INTEGRATION_TEST_RESULT_DIR}
          && cp -R ${BUILD_INTEGRATION_TEST_RESULT_DIR} integration_production/
          && mkdir -p ${BUILD_INTEGRATION_TEST_COVERAGE_DIR}
          && cp -R ${BUILD_INTEGRATION_TEST_COVERAGE_DIR} integration_production_coverage/
        environment:
          <<: [*sdk_environment, *os2_environment]
        when: always
    - persist_to_workspace:
        root: ./
        paths:
          - integration_production
          - integration_production_coverage
    - store_test_results:
        path: integration_production
    - <<: *store_logs
    - <<: *store_artifact_file

 run_os2_integration_tests:
  <<: *machine_definition
  steps:
    - checkout
    - run:
        <<: *setting_machine_environment
        environment:
          <<: [*sdk_environment, *os2_environment]
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_sdk_tools
    - run: ${SCRIPT_COMMAND} retrieve_testrunner
    - run: ${SCRIPT_COMMAND} retrieve_testserver
    - run:
        name: Running integration tests against OS2
        command: ${SCRIPT_COMMAND} run_integration_tests
        no_output_timeout: 20m
    - run:
        name: Copying test results
        command: >
          mkdir -p ${BUILD_INTEGRATION_TEST_RESULT_DIR}
          && cp -R ${BUILD_INTEGRATION_TEST_RESULT_DIR} integration_os2/
          && mkdir -p ${BUILD_INTEGRATION_TEST_COVERAGE_DIR}
          && cp -R ${BUILD_INTEGRATION_TEST_COVERAGE_DIR} integration_os2_coverage/
        when: always
        environment:
          <<: [*sdk_environment, *os2_environment]
    - persist_to_workspace:
        root: ./
        paths:
          - integration_os2
          - integration_os2_coverage
    - store_test_results:
        path: integration_os2
    - <<: *store_logs
    - <<: *store_artifact_file

 examples:
  <<: *java_job_environment
  steps:
    - checkout
    - <<: *get_cached_job_dependencies
    - <<: *attach_build
    - <<: *install_python
    - <<: *install_sdk_tools
    - run: ${SCRIPT_COMMAND} dependencies
    - run: ${SCRIPT_COMMAND} run_examples
    # - <<: *persist_build
    - <<: *store_logs

workflows:
  version: 2
  java_sdk_workflow:
    jobs:
      - pullTestRunner:
          filters: # This workflow is not run for codegen branches
            branches:
              ignore: /^.*swagger-codegen.*/
      - versioning:
          requires:
            - pullTestRunner
      - build:
          requires:
            - versioning
      - build_test_server:
          requires:
            - build
      - run_production_integration_tests:
          requires:
            - build_test_server
      - run_os2_integration_tests:
          requires:
            - build_test_server
      - static_analysis:
          requires:
            - build
      - unit_tests:
          requires:
            - build
      - documentation:
          requires:
            - build
      - quality_report:
          requires:
            - documentation
            - static_analysis
            - unit_tests
            - run_production_integration_tests
            - run_os2_integration_tests
      - deploySDK:
          requires:
            - quality_report
      - should_release:
          type: approval
          requires:
            - deploySDK
          filters: # This job is only available for non release commits
            tags:
              ignore: /(^latest$)|(^[0-9]+\.[0-9]+\.[0-9]+.*)/
            branches:
              only: /^master/
      - release_versioning:
          requires:
            - should_release
      - build_documentation:
          requires:
            - release_versioning
      # - examples

